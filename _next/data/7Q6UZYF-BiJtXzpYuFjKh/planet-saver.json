{"pageProps":{"contentHtml":"<html><head></head><body><h1>SlimFaas Planet Saver <a href=\"https://badge.fury.io/js/%40axa-fr%2Fslimfaas-planet-saver\"><img src=\"https://badge.fury.io/js/%40axa-fr%2Fslimfaas-planet-saver.svg\" alt=\"npm version\"></a></h1>\n<blockquote>\n<p><strong>Important Note</strong>: Starting from <strong>0 replicas</strong> to <strong>1 replica</strong> can be challenging because if no machine is available, the application must wait for a new machine to start. This startup process may exceed typical HTTP timeouts (for example, 7 minutes). <strong>SlimPlanet</strong> (via SlimFaas) solves this issue by providing a user-friendly interface that informs users the backend is starting, while the infrastructure wakes up in the background.</p>\n</blockquote>\n<p><strong>@axa-fr/slimfaas-planet-saver</strong> is a Vanilla JavaScript project to help ‚Äúsave the planet‚Äù by scaling your backends to zero when not in use, and waking them on demand. It is built around <a href=\"https://github.com/SlimPlanet/slimfaas\">SlimFaas</a>, the slimmest and simplest Function-as-a-Service for Kubernetes.</p>\n<p>SlimFaas provides an API to give your frontend detailed information about the state of your backend infrastructure. This makes <strong>@axa-fr/slimfaas-planet-saver</strong> a true <strong>‚Äúmind changer‚Äù</strong> ‚Äî in production, you can have zero replicas running for your API backend, and display a friendly message in the UI that the backend is starting (instead of showing an error). When the backend is ready, the user seamlessly continues their journey.</p>\n<p><img src=\"https://github.com/AxaFrance/SlimFaas/blob/main/documentation/SlimfaasPlanetSaver.gif?raw=true\" alt=\"SlimFaasPlanetSaver.gif\"></p>\n<hr>\n<h2>Why Use @axa-fr/slimfaas-planet-saver?</h2>\n<ul>\n<li><strong>User-Friendly Zero-Replica</strong>: Show users a ‚Äústarting up‚Äù message instead of an error when your backend is scaling from zero.</li>\n<li><strong>Easy Integration</strong>: A lightweight library that quickly plugs into your frontend code.</li>\n<li><strong>Real-Time Monitoring</strong>: Continually checks your SlimFaas environment status and updates the UI when your services are ready.</li>\n<li><strong>Mind Changer</strong>: Lets you remove always-on (idle) replicas. This can save costs and reduce carbon footprint.</li>\n</ul>\n<hr>\n<h2>Installation</h2>\n<p>Install via npm:</p>\n<pre><code class=\"language-bash hljs\"><span class=\"hljs-built_in\">npm</span> install @axa-fr/slimfaas-planet-saver\n</code></pre>\n<hr>\n<h2>Basic Usage (Vanilla JS Example)</h2>\n<pre><code class=\"language-js hljs\"><span class=\"hljs-keyword\">import</span> { <span class=\"hljs-title class_\">SlimFaasPlanetSaver</span> } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'@axa-fr/slimfaas-planet-saver'</span>;\n\n<span class=\"hljs-keyword\">const</span> planetSaver = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">SlimFaasPlanetSaver</span>(<span class=\"hljs-string\">'http://slimfaas.mycompany.com'</span>, {\n    <span class=\"hljs-attr\">interval</span>: <span class=\"hljs-number\">2000</span>,\n    <span class=\"hljs-attr\">fetch</span>: <span class=\"hljs-variable language_\">window</span>.<span class=\"hljs-property\">fetch</span>, <span class=\"hljs-comment\">// or any fetch polyfill</span>\n    <span class=\"hljs-attr\">updateCallback</span>: <span class=\"hljs-function\">(<span class=\"hljs-params\">data</span>) =&gt;</span> {\n        <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-string\">'Update callback data:'</span>, data);\n    },\n    <span class=\"hljs-attr\">errorCallback</span>: <span class=\"hljs-function\">(<span class=\"hljs-params\">error</span>) =&gt;</span> {\n        <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">error</span>(<span class=\"hljs-string\">'Error detected:'</span>, error);\n    },\n    <span class=\"hljs-attr\">overlayStartingMessage</span>: <span class=\"hljs-string\">'üå≥ Starting the environment... üå≥'</span>,\n    <span class=\"hljs-attr\">overlayNoActivityMessage</span>: <span class=\"hljs-string\">'No activity yet ‚Äî environment is sleeping.'</span>,\n    <span class=\"hljs-attr\">overlayErrorMessage</span>: <span class=\"hljs-string\">'An error occurred while starting the environment. Please try again later.'</span>,\n});\n\n<span class=\"hljs-comment\">// Initialize and begin polling</span>\nplanetSaver.<span class=\"hljs-title function_\">initialize</span>();\nplanetSaver.<span class=\"hljs-title function_\">startPolling</span>();\n\n<span class=\"hljs-comment\">// When you no longer need it:</span>\nplanetSaver.<span class=\"hljs-title function_\">cleanup</span>();\n\n</code></pre>\n<p>This example:</p>\n<ol>\n<li>Initializes a SlimFaasPlanetSaver instance with a base URL to your SlimFaas server.</li>\n<li>Configures callbacks for status updates and errors.</li>\n<li>Starts periodic polling to monitor environment readiness.</li>\n</ol>\n<hr>\n<h2>React.js Example</h2>\n<p>Below is a simplified code snippet showing how you might wrap your React app in a <code>PlanetSaver</code> component that checks if your environment is ready before rendering children:</p>\n<pre><code class=\"language-javascript hljs\"><span class=\"hljs-keyword\">import</span> <span class=\"hljs-title class_\">React</span>, { useState, useEffect, useRef } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'react'</span>;\n<span class=\"hljs-keyword\">import</span> { <span class=\"hljs-title class_\">SlimFaasPlanetSaver</span> } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">\"@axa-fr/slimfaas-planet-saver\"</span>;\n\n<span class=\"hljs-keyword\">const</span> <span class=\"hljs-title function_\">PlanetSaver</span> = (<span class=\"hljs-params\">{ children, baseUrl, fetch }</span>) =&gt; {\n  <span class=\"hljs-keyword\">const</span> [isFirstStart, setIsFirstStart] = <span class=\"hljs-title function_\">useState</span>(<span class=\"hljs-literal\">true</span>);\n  <span class=\"hljs-keyword\">const</span> environmentStarterRef = <span class=\"hljs-title function_\">useRef</span>(<span class=\"hljs-literal\">null</span>);\n\n  <span class=\"hljs-title function_\">useEffect</span>(<span class=\"hljs-function\">() =&gt;</span> {\n    <span class=\"hljs-keyword\">if</span> (!baseUrl) <span class=\"hljs-keyword\">return</span>;\n    <span class=\"hljs-keyword\">if</span> (environmentStarterRef.<span class=\"hljs-property\">current</span>) <span class=\"hljs-keyword\">return</span>;\n\n    <span class=\"hljs-keyword\">const</span> instance = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">SlimFaasPlanetSaver</span>(baseUrl, {\n      <span class=\"hljs-attr\">interval</span>: <span class=\"hljs-number\">2000</span>,\n      fetch,\n      <span class=\"hljs-attr\">updateCallback</span>: <span class=\"hljs-function\">(<span class=\"hljs-params\">data</span>) =&gt;</span> {\n        <span class=\"hljs-keyword\">const</span> allReady = data.<span class=\"hljs-title function_\">every</span>(<span class=\"hljs-function\">(<span class=\"hljs-params\">item</span>) =&gt;</span> item.<span class=\"hljs-property\">NumberReady</span> &gt;= <span class=\"hljs-number\">1</span>);\n        <span class=\"hljs-keyword\">if</span> (allReady &amp;&amp; isFirstStart) {\n          <span class=\"hljs-title function_\">setIsFirstStart</span>(<span class=\"hljs-literal\">false</span>);\n        }\n      },\n      <span class=\"hljs-attr\">errorCallback</span>: <span class=\"hljs-function\">(<span class=\"hljs-params\">error</span>) =&gt;</span> {\n        <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">error</span>(<span class=\"hljs-string\">'Error detected :'</span>, error);\n      },\n      <span class=\"hljs-attr\">overlayStartingMessage</span>: <span class=\"hljs-string\">'üå≥ Starting the environment.... üå≥'</span>,\n      <span class=\"hljs-attr\">overlayNoActivityMessage</span>: <span class=\"hljs-string\">'Waiting for activity to start environment...'</span>,\n      <span class=\"hljs-attr\">overlayErrorMessage</span>: <span class=\"hljs-string\">'An error occurred when starting the environment. Please contact an administrator.'</span>,\n      <span class=\"hljs-attr\">overlaySecondaryMessage</span>: <span class=\"hljs-string\">'Startup should be fast, but if no machines are available it can take several minutes.'</span>,\n      <span class=\"hljs-attr\">overlayLoadingIcon</span>: <span class=\"hljs-string\">'üåç'</span>,\n      <span class=\"hljs-attr\">overlayErrorSecondaryMessage</span>: <span class=\"hljs-string\">'If the error persists, please contact an administrator.'</span>\n    });\n\n    environmentStarterRef.<span class=\"hljs-property\">current</span> = instance;\n    instance.<span class=\"hljs-title function_\">initialize</span>();\n    instance.<span class=\"hljs-title function_\">startPolling</span>();\n\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-function\">() =&gt;</span> {\n      instance.<span class=\"hljs-title function_\">cleanup</span>();\n      environmentStarterRef.<span class=\"hljs-property\">current</span> = <span class=\"hljs-literal\">null</span>;\n    };\n  }, [baseUrl, fetch, isFirstStart]);\n\n  <span class=\"hljs-comment\">// Until the environment is confirmed ready, don't render children</span>\n  <span class=\"hljs-keyword\">if</span> (isFirstStart) {\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">null</span>;\n  }\n\n  <span class=\"hljs-keyword\">return</span> <span class=\"language-xml\"><span class=\"hljs-tag\">&lt;&gt;</span>{children}<span class=\"hljs-tag\">&lt;/&gt;</span></span>;\n};\n\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">default</span> <span class=\"hljs-title class_\">PlanetSaver</span>;\n</code></pre>\n<hr>\n<h2>Usage:</h2>\n<pre><code class=\"language-jsx hljs\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">PlanetSaver</span> <span class=\"hljs-attr\">baseUrl</span>=<span class=\"hljs-string\">\"http://slimfaas.mycompany.com\"</span> <span class=\"hljs-attr\">fetch</span>=<span class=\"hljs-string\">{window.fetch}</span>&gt;</span>\n  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">App</span> /&gt;</span>\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">PlanetSaver</span>&gt;</span>\n</code></pre>\n<hr>\n<h2>Running the Demo Locally</h2>\n<p>To see @axa-fr/slimfaas-planet-saver in action:</p>\n<pre><code class=\"language-bash hljs\">git <span class=\"hljs-built_in\">clone</span> https://github.com/SlimPlanet/slimfaas.git\n<span class=\"hljs-built_in\">cd</span> slimfaas/src/SlimFaasPlanetSaver\nnpm install\nnpm run dev\n</code></pre>\n<p>Then open your browser at the address shown in the console to view the demo.</p>\n</body></html>","metadata":{}},"__N_SSG":true}