{"pageProps":{"contentHtml":"<html><head></head><body><h1>SlimFaas Functions (Sync &amp; Async)</h1>\n<p>SlimFaas offers <strong>two main ways</strong> to invoke functions: <strong>synchronous</strong> and <strong>asynchronous</strong> HTTP calls.\nBelow is an overview of each.</p>\n<hr>\n<h2>1. Synchronous Functions</h2>\n<p>Synchronous calls block until the underlying function pod handles the request and returns a response.</p>\n<ul>\n<li>\n<p><strong>Route</strong>:\n<code>GET/POST/PUT/... http://&lt;slimfaas&gt;/function/&lt;functionName&gt;/&lt;path&gt;</code></p>\n</li>\n<li>\n<p><strong>Example</strong>:\nGET http://localhost:30021/function/fibonacci1/hello/guillaume → 200 (OK) with response from fibonacci1</p>\n</li>\n</ul>\n<p>If your function has scaled to zero, SlimFaas automatically <strong>wakes it up</strong> and waits until at least one replica is ready (subject to internal timeouts).</p>\n<hr>\n<h2>2. Asynchronous Functions</h2>\n<p>Asynchronous calls return immediately (HTTP 202 or 201), while SlimFaas queues the request and processes it in the background.</p>\n<ul>\n<li>\n<p><strong>Route</strong>:\n<code>GET/POST/PUT/... http://&lt;slimfaas&gt;/async-function/&lt;functionName&gt;/&lt;path&gt;</code></p>\n</li>\n<li>\n<p><strong>Example</strong>:\nGET http://localhost:30021/async-function/fibonacci1/hello/guillaume → 202 (Accepted), handled in background\nsynchronous mode also allows:</p>\n</li>\n<li>\n<p><strong>Limiting parallel requests</strong> via annotations (e.g., <code>SlimFaas/NumberParallelRequest</code>).</p>\n</li>\n<li>\n<p><strong>Retry pattern</strong> on timeouts or specific HTTP status codes.</p>\n</li>\n</ul>\n<hr>\n<h2>3. Wake Function</h2>\n<p>You can explicitly “wake up” a function without invoking a specific route:</p>\n<ul>\n<li>\n<p><strong>Route</strong>:\n<code>GET http://&lt;slimfaas&gt;/wake-function/&lt;functionName&gt;</code></p>\n</li>\n<li>\n<p><strong>Response</strong>:\n<code>204 (No Content)</code></p>\n</li>\n</ul>\n<p>This is handy if you want to ensure the function is running before real traffic arrives.</p>\n<hr>\n<h2>4. Listing Functions</h2>\n<p>SlimFaas exposes a route to check the readiness status of all registered functions:</p>\n<ul>\n<li>\n<p><strong>Route</strong>:\n<code>GET http://&lt;slimfaas&gt;/status-functions</code></p>\n</li>\n<li>\n<p><strong>Response</strong>:\nAn array of objects with details like <code>NumberReady</code>, <code>numberRequested</code>, <code>PodType</code>, <code>Visibility</code>, etc.</p>\n</li>\n</ul>\n<pre><code class=\"language-json hljs\">[\n    {\n      <span class=\"hljs-string\">\"NumberReady\"</span>: <span class=\"hljs-number\">1</span>,\n      <span class=\"hljs-string\">\"numberRequested\"</span>: <span class=\"hljs-number\">1</span>,\n      <span class=\"hljs-string\">\"PodType\"</span>: <span class=\"hljs-string\">\"Deployment\"</span>,\n      <span class=\"hljs-string\">\"Visibility\"</span>: <span class=\"hljs-string\">\"Public\"</span>,\n      <span class=\"hljs-string\">\"Name\"</span>: <span class=\"hljs-string\">\"fibonacci1\"</span>\n    },\n    ...\n]\n</code></pre>\n<h2>5. Private vs. Public Functions</h2>\n<p>By default, functions are <strong>Public</strong> (accessible from anywhere). You can specify them as <strong>Private</strong>—restricting access to calls originating from within the same namespace or from “Trusted” pods—by using annotations:</p>\n<pre><code class=\"language-yaml hljs\"><span class=\"hljs-params\">metadata:</span>\n    <span class=\"hljs-params\">annotations:</span>\n        SlimFaas<span class=\"hljs-operator\">/</span><span class=\"hljs-params\">DefaultVisibility:</span> <span class=\"hljs-string\">\"Private\"</span>\n        <span class=\"hljs-comment\"># or define paths:</span>\n        SlimFaas<span class=\"hljs-operator\">/</span><span class=\"hljs-params\">UrlsPathStartWithVisibility:</span> <span class=\"hljs-string\">\"Private:/mypath,Public:/otherpath\"</span>\n</code></pre>\n<p>This helps you control which services can call certain endpoints.</p>\n<h2>6. Function Configuration</h2>\n<p>You can fine-tune sync/async HTTP timeouts, retries, and more using JSON config in <code>SlimFaas/Configuration</code>:</p>\n<pre><code class=\"language-json hljs\">{\n  <span class=\"hljs-string\">\"DefaultSync\"</span>: {\n    <span class=\"hljs-string\">\"HttpTimeout\"</span>: <span class=\"hljs-number\">120</span>,\n    <span class=\"hljs-string\">\"TimeoutRetries\"</span>: [<span class=\"hljs-number\">2</span>,<span class=\"hljs-number\">4</span>,<span class=\"hljs-number\">8</span>],\n    <span class=\"hljs-string\">\"HttpStatusRetries\"</span>: [<span class=\"hljs-number\">500</span>,<span class=\"hljs-number\">502</span>,<span class=\"hljs-number\">503</span>]\n  },\n  <span class=\"hljs-string\">\"DefaultAsync\"</span>: {\n    <span class=\"hljs-string\">\"HttpTimeout\"</span>: <span class=\"hljs-number\">120</span>,\n    <span class=\"hljs-string\">\"TimeoutRetries\"</span>: [<span class=\"hljs-number\">2</span>,<span class=\"hljs-number\">4</span>,<span class=\"hljs-number\">8</span>],\n    <span class=\"hljs-string\">\"HttpStatusRetries\"</span>: [<span class=\"hljs-number\">500</span>,<span class=\"hljs-number\">502</span>,<span class=\"hljs-number\">503</span>]\n  },\n  <span class=\"hljs-string\">\"DefaultPublish\"</span>: {\n    <span class=\"hljs-string\">\"HttpTimeout\"</span>: <span class=\"hljs-number\">120</span>,\n    <span class=\"hljs-string\">\"TimeoutRetries\"</span>: [<span class=\"hljs-number\">2</span>,<span class=\"hljs-number\">4</span>,<span class=\"hljs-number\">8</span>],\n    <span class=\"hljs-string\">\"HttpStatusRetries\"</span>: [<span class=\"hljs-number\">500</span>,<span class=\"hljs-number\">502</span>,<span class=\"hljs-number\">503</span>]\n  }\n}\n</code></pre>\n<p>These settings let you define how aggressively to retry failing calls, which statuses to retry, and more.</p>\n<hr>\n<h2>7. The DependsOn Annotation</h2>\n<p>You can also add a <code>DependsOn</code> annotation to specify that your function should wait for certain other pods to be ready before it scales up from zero. For example:</p>\n<pre><code class=\"language-yaml hljs\"><span class=\"hljs-params\">metadata:</span>\n    <span class=\"hljs-params\">annotations:</span>\n        SlimFaas<span class=\"hljs-operator\">/</span><span class=\"hljs-params\">Function:</span> <span class=\"hljs-string\">\"true\"</span>\n        SlimFaas<span class=\"hljs-operator\">/</span><span class=\"hljs-params\">ReplicasMin:</span> <span class=\"hljs-string\">\"0\"</span>\n        SlimFaas<span class=\"hljs-operator\">/</span><span class=\"hljs-params\">ReplicasAtStart:</span> <span class=\"hljs-string\">\"1\"</span>\n        <span class=\"hljs-comment\"># ...</span>\n        SlimFaas<span class=\"hljs-operator\">/</span><span class=\"hljs-params\">DependsOn:</span> <span class=\"hljs-string\">\"mysql,fibonacci2\"</span>\n</code></pre>\n<ul>\n<li><strong>mysql</strong> and <strong>fibonacci2</strong> are the names of other deployments/statefulsets in the same namespace.</li>\n<li>SlimFaas will not scale the current function (e.g., <code>fibonacci1</code>) unless all pods listed in <code>DependsOn</code> are in a ready state and meet their own minimum replicas.</li>\n</ul>\n<p>This is useful in scenarios where your function must not start until a database or another dependent function is confirmed running.</p>\n</body></html>","metadata":{}},"__N_SSG":true}