{"pageProps":{"contentHtml":"<html><head></head><body><h1>How SlimFaas Works (Architecture)</h1>\n<p>Under the hood, SlimFaas is an <strong>HTTP proxy</strong> that intercepts requests for your functions, jobs, or events.\nIt handles scaling, routing, and state management.</p>\n<hr>\n<h2>1. Core Concepts</h2>\n<ol>\n<li>\n<p><strong>SlimFaas Pod</strong>\nRuns as a <strong>Deployment</strong> or <strong>StatefulSet</strong> (commonly 3 replicas in production). Each pod has internal workers:</p>\n<ul>\n<li><strong>SlimWorker</strong>: Handles async call processing.</li>\n<li><strong>SlimDataSynchronizationWorker</strong>: Manages the embedded database cluster (Raft-based).</li>\n<li><strong>HistorySynchronizationWorker</strong>: Syncs request history and logs.</li>\n<li><strong>ReplicasSynchronizationWorker</strong>: Keeps track of your function pods’ replicas and statuses in Kubernetes.</li>\n<li><strong>ReplicasScaleWorker</strong>: If the SlimFaas pod is leader, it scales up/down your function pods.</li>\n</ul>\n</li>\n<li>\n<p><strong>SlimData</strong>\nA built-in key-value store based on <a href=\"https://raft.github.io/\">Raft</a>, provided by .NET’s <a href=\"https://github.com/dotnet/dotNext\">dotNext</a>.\nThis database is crucial for consistent state among SlimFaas pods.</p>\n</li>\n<li>\n<p><strong>Annotations</strong>\nAdd or remove SlimFaas <strong>annotations</strong> on your pods/Deployments to control scaling, concurrency, visibility, and timeouts.</p>\n</li>\n<li>\n<p><strong>Public vs. Private</strong>\nRestricts who can access a function/job (any external caller vs. same-namespace or trusted pods).</p>\n</li>\n</ol>\n<hr>\n<h2>2. Request Flow</h2>\n<h3>Synchronous HTTP Calls</h3>\n<ol>\n<li><strong>Client → SlimFaas</strong>\n<code>GET /function/&lt;functionName&gt;/...</code></li>\n<li><strong>SlimFaas</strong> ensures the target function is scaled up and ready.</li>\n<li><strong>SlimFaas → Function</strong>\nWait for the function’s response.</li>\n<li><strong>SlimFaas</strong> returns the function’s response to the client.</li>\n</ol>\n<p><img src=\"https://github.com/AxaFrance/SlimFaas/blob/main/documentation/sync_http_call.PNG?raw=true\" alt=\"sync_http_call.PNG\"></p>\n<h3>Asynchronous HTTP Calls</h3>\n<ol>\n<li><strong>Client → SlimFaas</strong>\n<code>GET /async-function/&lt;functionName&gt;/...</code> (returns immediately with <code>202 Accepted</code>).</li>\n<li><strong>SlimFaas</strong> enqueues the request in SlimData.</li>\n<li><strong>SlimWorker</strong> processes requests in the background, respecting concurrency limits.</li>\n<li><strong>Function</strong> handles each request. SlimFaas logs outcomes in SlimData.</li>\n</ol>\n<p><img src=\"https://github.com/AxaFrance/SlimFaas/blob/main/documentation/async_http_call.PNG?raw=true\" alt=\"async_http_call.PNG\"></p>\n<h3>Publish/Subscribe (Events)</h3>\n<ol>\n<li><strong>Client → SlimFaas</strong>\n<code>POST /publish-event/&lt;eventName&gt;</code> with JSON payload.</li>\n<li>SlimFaas synchronously broadcasts the payload to each subscribed function’s replicas.</li>\n<li>Each replica processes the event and responds individually to SlimFaas.</li>\n</ol>\n<p><img src=\"https://github.com/AxaFrance/SlimFaas/blob/main/documentation/publish_sync_call.png?raw=true\" alt=\"publish_sync_call.png\"></p>\n<hr>\n<h2>3. Scaling Logic</h2>\n<ul>\n<li><strong>Scale to 0</strong> after a defined inactivity (<code>SlimFaas/TimeoutSecondBeforeSetReplicasMin</code>).</li>\n<li><strong>Scale from 0 to 1+</strong> when a new request arrives or <code>wake-function</code> is called.</li>\n<li><strong>Optional</strong>: Use standard K8s Horizontal Pod Autoscalers or KEDA if you need more advanced scaling triggers.</li>\n</ul>\n<hr>\n<h2>4. Build &amp; Technology Stack</h2>\n<p>SlimFaas is developed in <strong>.NET</strong>, chosen for its:</p>\n<ul>\n<li>High performance in web APIs. SlimFaas is compile in Ahead Of Time (AOT) mode which produce a <strong>native</strong> application.</li>\n<li>Excellent concurrency model.</li>\n<li>Constant improvements in speed and memory usage.</li>\n<li>Compact container images.</li>\n</ul>\n<hr>\n<p>That’s the architecture in a nutshell! SlimFaas ensures your functions and jobs scale efficiently while\nremaining lightweight and easy to set up.</p>\n</body></html>","metadata":{}},"__N_SSG":true}