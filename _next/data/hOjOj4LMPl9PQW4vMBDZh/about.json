{"pageProps":{"contentHtml":"<h1>SlimFaas : The slimmest and simplest Function As A Service <a href=\"https://github.com/SlimPlanet/SlimFaas/actions/workflows/slimfaas-ci.yaml\"><img src=\"https://github.com/SlimPlanet/SlimFaas/actions/workflows/slimfaas-ci.yaml/badge.svg\" alt=\"Continuous Integration\"></a> <a href=\"https://sonarcloud.io/dashboard?id=SlimPlanet_SlimFaas\"><img src=\"https://sonarcloud.io/api/project_badges/measure?project=SlimPlanet_SlimFaas&#x26;metric=alert_status\" alt=\"Quality Gate\"></a> <a href=\"https://sonarcloud.io/component_measures?id=SlimPlanet_SlimFaas&#x26;metric=reliability_rating\"><img src=\"https://sonarcloud.io/api/project_badges/measure?project=SlimPlanet_SlimFaas&#x26;metric=reliability_rating\" alt=\"Reliability\"></a> <a href=\"https://sonarcloud.io/component_measures?id=SlimPlanet_SlimFaas&#x26;metric=security_rating\"><img src=\"https://sonarcloud.io/api/project_badges/measure?project=SlimPlanet_SlimFaas&#x26;metric=security_rating\" alt=\"Security\"></a> <a href=\"https://sonarcloud.io/component_measures?id=SlimPlanet_SlimFaas&#x26;metric=Coverage\"><img src=\"https://sonarcloud.io/api/project_badges/measure?project=SlimPlanet_SlimFaas&#x26;metric=coverage\" alt=\"Code Corevage\"></a></h1>\n<p><a href=\"https://hub.docker.com/r/axaguildev/slimfaas/builds\"><img src=\"https://img.shields.io/docker/pulls/axaguildev/slimfaas.svg?label=docker+pull+slimfaas\" alt=\"Docker SlimFaas\"></a> <a href=\"https://hub.docker.com/r/axaguildev/slimfaas/builds\"><img src=\"https://img.shields.io/docker/image-size/axaguildev/slimfaas?label=image+size+slimfaas\" alt=\"Docker Image Size\"></a>\n<a href=\"https://hub.docker.com/r/axaguildev/slimfaas/builds\"><img src=\"https://img.shields.io/docker/v/axaguildev/slimfaas?sort=semver&#x26;label=latest+version+slimfaas\" alt=\"Docker Image Version\"></a></p>\n<p><img src=\"https://github.com/AxaFrance/SlimFaas/blob/main/documentation/SlimFaas.png?raw=true\" alt=\"SlimFaas.png\"></p>\n<p>Why use SlimFaas?</p>\n<ul>\n<li>Scale\n<ul>\n<li>to 0 after a period of inactivity (work with deployment and statefulset)</li>\n<li>from 0 to n at start (HTTP trigger)</li>\n<li>from n to n+m : compatible with HPA (Horizontal Auto Scaler) and Keda + Prometheus via /metrics routes (SlimFaas integrated autonomous Scale Up coming soon)</li>\n</ul>\n</li>\n<li>Synchronous HTTP calls</li>\n<li>Asynchronous HTTP calls\n<ul>\n<li>Allows you to limit the number of parallel HTTP requests for each underlying function</li>\n</ul>\n</li>\n<li>Retry Pattern configurable</li>\n<li>Run job from HTTP calls</li>\n<li>Private and Public functions and jobs\n<ul>\n<li>Private functions can be accessed only by internal namespace http call from pods</li>\n</ul>\n</li>\n<li>Synchronous Publish/Subscribe internal events via HTTP calls to every replicas via HTTP without any use of specific drivers/libraries (<strong>Couple your application with SlimFaas</strong>)</li>\n<li><strong>Mind Changer</strong>: REST API that show the status of your functions and allow to wake up your infrastructure (<strong>Couple your application with Slimfaas</strong>)\n<ul>\n<li>Very useful to inform end users that your infrastructure is starting</li>\n</ul>\n</li>\n<li>Plug and Play: just deploy a standard pod\n<ul>\n<li>No impact on your current kubernetes manifests: just add an annotation to the pod you want to auto-scale</li>\n</ul>\n</li>\n<li>Very <strong>Slim</strong> and very <strong>Fast</strong></li>\n</ul>\n<p><img src=\"https://github.com/AxaFrance/SlimFaas/blob/main/documentation/slim-faas-ram-cpu.png?raw=true\" alt=\"slim-faas-ram-cpu.png\"></p>\n<h2>Getting Started with Kubernetes</h2>\n<p>To test SlimFaas on your local machine by using kubernetes with Docker Desktop, please use these commands:</p>\n<pre><code class=\"language-bash\">git clone https://github.com/AxaFrance/slimfaas.git\ncd slimfaas\ncd demo\n# Create slimfaas service account and pods\nkubectl apply -f deployment-slimfaas.yml\n# Expose SlimFaaS service as NodePort or Ingress\nkubectl apply -f slimfaas-nodeport.yml\n# or\n# kubectl apply -f slimfaas-ingress.yml\n# Install three instances of fibonacci functions\n# fibonacci1, fibonacci2 and fibonacci3\nkubectl apply -f deployment-functions.yml\n# Install MySql\nkubectl apply -f deployment-mysql.yml\n# to run Single Page webapp demo (optional) on http://localhost:8000\ndocker run -d -p 8000:8000 --rm axaguildev/fibonacci-webapp:latest\n</code></pre>\n<p>Now, you can access your pod via SlimFaas proxy:</p>\n<p>Synchronous way:</p>\n<ul>\n<li>http://localhost:30021/function/fibonacci1/hello/guillaume => HTTP 200 (OK)</li>\n<li>http://localhost:30021/function/fibonacci2/hello/elodie => HTTP 200 (OK)</li>\n<li>http://localhost:30021/function/fibonacci3/hello/julie => HTTP 200 (OK)</li>\n<li>http://localhost:30021/function/fibonacci4/hello/julie => HTTP 404 (Not Found)</li>\n</ul>\n<p>Asynchronous way:</p>\n<ul>\n<li>http://localhost:30021/async-function/fibonacci1/hello/guillaume => HTTP 202 (Accepted)</li>\n<li>http://localhost:30021/async-function/fibonacci2/hello/elodie => HTTP 202 (Accepted)</li>\n<li>http://localhost:30021/async-function/fibonacci3/hello/julie => HTTP 202 (Accepted)</li>\n<li>http://localhost:30021/async-function/fibonacci3/hello/julie => HTTP 404 (Not Found)</li>\n</ul>\n<p>Just wake up function:</p>\n<ul>\n<li>http://localhost:30021/wake-function/fibonacci1 => HTTP 204 (OK - No Content)</li>\n<li>http://localhost:30021/wake-function/fibonacci2 => HTTP 204 (OK - No Content)</li>\n<li>http://localhost:30021/wake-function/fibonacci3 => HTTP 204 (OK - No Content)</li>\n<li>http://localhost:30021/wake-function/fibonacci4 => HTTP 204 (OK - No Content)</li>\n</ul>\n<p>List all function status:</p>\n<ul>\n<li>http://localhost:30021/status-functions => [{\"NumberReady\":1,\"numberRequested\":1,PodType\":\"Deployment\",\"Visibility\":\"Public\",\"Name\":\"fibonacci1\"},\n{\"NumberReady\":1,\"numberRequested\":1,PodType\":\"Deployment\",\"Visibility\":\"Public\",\"Name\":\"fibonacci2\"},\n{\"NumberReady\":1,\"numberRequested\":1,PodType\":\"Deployment\",\"Visibility\":\"Public\",\"Name\":\"fibonacci3\"},\n{\"NumberReady\":2,\"numberRequested\":2,PodType\":\"Deployment\",\"Visibility\":\"Private\",\"Name\":\"fibonacci4\"}]</li>\n</ul>\n<p>Send event to every function replicas (which deployment subscribe to the event name) in synchronous way:</p>\n<ul>\n<li>HTTP POST http://localhost:30021/publish-event/my-event-name {\"data\":\"my-data\"} => HTTP 204 (No Content)</li>\n</ul>\n<p>Single Page WebApp demo:</p>\n<ul>\n<li>http://localhost:8000</li>\n</ul>\n<p>Enjoy slimfaas!!!!</p>\n<h2>Getting Started with docker-compose</h2>\n<p>To test slimfaas on your local machine by using kubernetes with Docker Desktop, please use these commands:</p>\n<pre><code class=\"language-bash\">git clone https://github.com/AxaFrance/slimfaas.git\ncd slimfaas\ndocker-compose up\n</code></pre>\n<p>Now, you can access your pod via SlimFaas proxy:</p>\n<ul>\n<li>http://slimfaas/function/fibonacci/hello/guillaume</li>\n</ul>\n<p>Enjoy slimfaas!!!!</p>\n<h2>Getting Started with @axa-fr/slimfaas-planet-saver</h2>\n<p><a href=\"./src/SlimFaasPlanetSaver#README.md\"><code>@axa-fr/slimfaas-planet-saver readme.md</code></a> : A vanilla JavaScript library to start and monitor replicas from javascript frontend.</p>\n<p><img src=\"https://github.com/AxaFrance/SlimFaas/blob/main/documentation/SlimfaasPlanetSaver.gif?raw=true\" alt=\"SlimFaasPlanetSaver.gif\"></p>\n<h2>How it works</h2>\n<p>SlimFaas act as an HTTP proxy with 2 modes:</p>\n<h3>Synchronous HTTP call</h3>\n<ul>\n<li>Synchronous http://slimfaas/function/myfunction = > HTTP response function</li>\n</ul>\n<p><img src=\"https://github.com/AxaFrance/SlimFaas/blob/main/documentation/sync_http_call.PNG\" alt=\"sync_http_call.PNG\"></p>\n<h3>Asynchronous HTTP call</h3>\n<ul>\n<li>Asynchronous http://slimfaas/async-function/myfunction => HTTP 201\n<ul>\n<li>Tail using SlimData database included in SlimFaas pod</li>\n</ul>\n</li>\n</ul>\n<p><img src=\"https://github.com/AxaFrance/SlimFaas/blob/main/documentation/async_http_call.PNG\" alt=\"async_http_call.PNG\"></p>\n<h3>Wake HTTP call</h3>\n<ul>\n<li>Wake http://slimfaas/wake-function/myfunction => HTTP 200\n<ul>\n<li>Wake up a function</li>\n</ul>\n</li>\n</ul>\n<h3>Synchronous Publish HTTP call (events) to every replicas</h3>\n<p>To publish the message to every replicas in \"Ready\" state of the function</p>\n<ul>\n<li>HTTP POST http://slimfaas/publish-event/my-event-name {\"data\":\"my-event-data\"}</li>\n</ul>\n<p><img src=\"https://github.com/AxaFrance/SlimFaas/blob/main/documentation/publish_sync_call.png\" alt=\"publish_sync_call.png\"></p>\n<h2>How to install</h2>\n<ol>\n<li>Add SlimFaas StatefulSet to your kubernetes cluster</li>\n<li>Add SlimFaas annotations to your pods</li>\n<li>Have fun!</li>\n</ol>\n<p>sample-deployment.yaml</p>\n<pre><code class=\"language-yaml\">apiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: fibonacci1\n  namespace: slimfaas-demo\nspec:\n  selector:\n    matchLabels:\n      app: fibonacci1\n  template:\n    metadata:\n      labels:\n        app: fibonacci1\n      annotations:\n        # Just add SlimFaas annotation to your pods and that's it !\n        SlimFaas/Function: \"true\"\n        SlimFaas/ReplicasMin: \"0\"\n        SlimFaas/ReplicasAtStart: \"1\"\n        SlimFaas/DependsOn: \"mysql,fibonacci2\" # comma separated list of deployment or statefulset names\n        SlimFaas/TimeoutSecondBeforeSetReplicasMin: \"300\"\n        SlimFaas/NumberParallelRequest : \"10\"\n        SlimFaas/Schedule: |\n            {\"TimeZoneID\":\"Europe/Paris\",\"Default\":{\"WakeUp\":[\"07:00\"],\"ScaleDownTimeout\":[{\"Time\":\"07:00\",\"Value\":3600},{\"Time\":\"21:00\",\"Value\":60}]}}\n        SlimFaas/SubscribeEvents: \"Public:my-event-name1,Private:my-event-name2,my-event-name3\" # comma separated list of event names\n        SlimFaas/DefaultVisibility: \"Public\" # Public or Private (private can be accessed only by internal namespace https call from pods)\n        SlimFaas/DefaultTrusted: \"Trusted\" # Trusted or Untrusted (message from Untrusted pods will be considered as untrusted and won't be able to access Private actions)\n        SlimFaas/UrlsPathStartWithVisibility: \"Private:/mypath/subPath,Private:/mysecondpath\" # Public or Private (private can be accessed only by internal namespace https call from pods)\n    spec:\n      serviceAccountName: default\n      containers:\n        - name: fibonacci1\n          image: docker.io/axaguildev/fibonacci:latest\n          livenessProbe:\n              httpGet:\n                  path: /health\n                  port: 5000\n              initialDelaySeconds: 5\n              periodSeconds: 5\n              timeoutSeconds: 5\n          resources:\n            limits:\n              memory: \"96Mi\"\n              cpu: \"50m\"\n            requests:\n              memory: \"96Mi\"\n              cpu: \"10m\"\n          ports:\n            - containerPort: 50004\n---\napiVersion: v1\nkind: Service\nmetadata:\n    name: fibonacci1\n    namespace: slimfaas-demo\nspec:\n    selector:\n        app: fibonacci1\n    ports:\n        - port: 5000\n---\napiVersion: apps/v1\nkind: StatefulSet\nmetadata:\n  name: slimfaas\n  namespace: slimfaas-demo\nspec:\n  replicas: 3\n  podManagementPolicy: Parallel\n  serviceName: slimfaas\n  selector:\n    matchLabels:\n      app: slimfaas\n  template:\n    metadata:\n      labels:\n        app: slimfaas\n    spec:\n      volumes:\n        - name: slimfaas-volume\n          emptyDir:\n            sizeLimit: 10Mi\n      serviceAccountName: admin # Use a service account with admin role\n      containers:\n        - name: slimfaas\n          image: docker.io/axaguildev/slimfaas:latest\n          livenessProbe:\n            httpGet:\n              path: /health\n              port: 5000\n            initialDelaySeconds: 3\n            periodSeconds: 10\n            timeoutSeconds: 8\n            terminationGracePeriodSeconds: 30\n          #env:\n            #- name: SLIMFAAS_PORTS\n            #  value: \"5000\" # can be like \"5000,6000,7000\" if you want to expose more ports\n            #- name: SLIMDATA_DIRECTORY\n            #   value: \"/database\"\n            #- name: NAMESPACE\n            #   value: \"default\"\n            #- name: BASE_FUNCTION_URL\n            #  value: \"http://{function_name}.{namespace}.svc.cluster.local:5000\"\n            #  value: \"http://{pod_id}:{pod_port}\"\n            #- name: BASE_FUNCTION_POD_URL # require for publish route\n            #  value: \"http://{pod_ip}:{pod_port}\"\n            #- name: BASE_SLIMDATA_URL\n            #  value: \"http://{pod_name}.slimfaas.{namespace}.svc.cluster.local:3262/\"  # Don't expose this port, it can also be like \"http://{pod_ip}:3262/\" but if you can use DNS it's better\n            # If you want to send event to an url which is not a SlimFaas function, you can use this env variable\n            # use comma to separate event name and url, use => to separate event name and destination url.\n            # urls are separated by ;\n            #- name: SLIMFAAS_SUBSCRIBE_EVENTS\n            #  value: \"my-event-name1=>http://localhost:5002;http://localhost:5003,my-event-name2=>http://localhost:5002\"\n            # If you want to use just one pod for testing purpose, you can use this env variable\n            #- name: SLIMDATA_CONFIGURATION\n            #  value: |\n            #      {\"coldStart\":\"true\"}\n            # If you are not on kubernetes for example docker-compose, you can use this env variable, but you will lose auto-scale\n            #- name: MOCK_KUBERNETES_FUNCTIONS\n            #  value: \"{\"Functions\":[{\"Name\":\"fibonacci\",\"NumberParallelRequest\":1}],\"Slimfaas\":[{\"Name\":\"slimfaas-1\"}]}\"\n            # Configure CORS allowed Origins, default is *, you can use a comma separated list example: http://localhost:3000,http://localhost:3001\n            #- name: SLIMFAAS_CORS_ALLOW_ORIGIN\n            # Optional, longer is the delay, less CPU and RAM is used\n            #- name : HISTORY_SYNCHRONISATION_WORKER_DELAY_MILLISECONDS\n            #  value : \"500\" # default equivalent to 0,5 seconds\n            # Optional, longer is the delay, less CPU and RAM is used\n            #- name : REPLICAS_SYNCHRONISATION_WORKER_DELAY_MILLISECONDS\n            #  value : \"2000\" # default equivalent to 2 seconds\n            # Optional, longer is the delay, less CPU and RAM is used\n            #- name : SLIM_WORKER_DELAY_MILLISECONDS\n            #  value : \"50\" # default equivalent to 50 milliseconds\n            # Optional, longer is the delay, less CPU and RAM is used\n            #- name : SCALE_REPLICAS_WORKER_DELAY_MILLISECONDS\n            #  value : \"1000\" # default equivalent to 1 seconds\n            # Optional\n            # name : TIME_MAXIMUM_WAIT_FOR_AT_LEAST_ONE_POD_STARTED_FOR_SYNC_FUNCTION\n            # value : \"10000\" # default equivalent to 10 seconds\n            # Optional\n            # name : POD_SCALED_UP_BY_DEFAULT_WHEN_INFRASTRUCTURE_HAS_NEVER_CALLED\n            # value : \"false\" # default equivalent to false\n            # Optional\n            # name : SLIMFAAS_ALLOW_UNSECURE_SSL\n            # value : \"false\" # default equivalent to false\n            # Optional\n            # name: HEALTH_WORKER_DELAY_MILLISECONDS\n            # value: \"1000\" # default equivalent to 1 seconds\n            # Optional\n            # name: HEALTH_WORKER_DELAY_TO_EXIT_SECONDS\n            # value: \"60\" # default equivalent to 10 seconds\n\n            # name : SLIMDATA_CONFIGURATION # represent SlimData internal configuration, more documentation here: https://dotnet.github.io/dotNext/features/cluster/raft.html\n            # value : | #default values\n            #    {\n            #      \"partitioning\":\"false\",\n            #      \"lowerElectionTimeout\":\"150\",\n            #      \"upperElectionTimeout\":\"300\",\n            #      \"requestTimeout\":\"00:00:00.3000000\",\n            #      \"rpcTimeout\":\"00:00:00.1500000\",\n            #      \"coldStart\":\"false\",\n            #      \"requestJournal:memoryLimit\":\"5\",\n            #      \"requestJournal:expiration\":\"00:01:00\",\n            #      \"heartbeatThreshold\":\"0.5\",\n            #   }\n            # name : SLIMFAAS_JOB_CONFIGURATION\n            # value : | # represent SlimFaas internal configuration, more documentation here:\n            #    {\n            #          \"DefaultNumberParallelRequest\": 1, # Timeout in seconds\n            #          \"DefaultVisibility\": \"Private\", # Retry pattern in seconds\n            #          \"AllowDynamicJob\": false,\n            #          \"Jobs\": {\n            #              \"daisy\" : { \"NumberParallelRequest\": 1, \"Visibility\": \"Public\" }\n            #          }\n            #    }\n          volumeMounts:\n            - name: slimfaas-volume\n              mountPath: /database\n          resources:\n            limits:\n              memory: \"76Mi\"\n              cpu: \"400m\"\n            requests:\n              memory: \"76Mi\"\n              cpu: \"250m\"\n          ports:\n            - containerPort: 5000\n            - containerPort: 3262\n  # You can use this section to define a persistent volume claim\n  #volumeClaimTemplates:\n  #- metadata:\n  #    name: slimfaas-volume\n  #  spec:\n  #    accessModes: [ \"ReadWriteOnce\" ]\n  #    storageClassName: managed-csi # or any other storage class available in your cluster\n  #    volumeMode: Filesystem\n  #    resources:\n  #      requests:\n  #        storage: 10Mi\n---\napiVersion: v1\nkind: Service\nmetadata:\n    name: slimfaas\n    namespace: slimfaas-demo\nspec:\n    selector:\n        app: slimfaas\n    ports:\n        - name: \"http\"\n          port: 80\n          targetPort: 5000\n        - name: \"slimdata\"\n          port: 3262\n          targetPort: 3262\n</code></pre>\n<blockquote>\n<p>[!WARNING]\nYours <strong>service name</strong> must be the same as the SlimFaas <strong>Deployment/StatefulSet name</strong></p>\n</blockquote>\n<h3>SlimFaas Annotations with defaults values</h3>\n<ul>\n<li><strong>SlimFaas/Function</strong>: \"true\"\n<ul>\n<li>Activate SlimFaas on this pod, so your pod will be auto-scaled</li>\n</ul>\n</li>\n<li><strong>SlimFaas/ReplicasMin</strong>: \"0\"\n<ul>\n<li>Scale down to this value after a period of inactivity</li>\n</ul>\n</li>\n<li><strong>SlimFaas/ReplicasAtStart</strong>: \"1\"\n<ul>\n<li>Scale up to this value at start</li>\n</ul>\n</li>\n<li><strong>SlimFaas/TimeoutSecondBeforeSetReplicasMin</strong>: \"300\"\n<ul>\n<li>Scale down to SlimFaas/ReplicasMin after this period of inactivity in seconds</li>\n</ul>\n</li>\n<li><strong>SlimFaas/NumberParallelRequest</strong> : \"10\"\n<ul>\n<li>Limit the number of parallel HTTP requests for each underlying function</li>\n</ul>\n</li>\n<li><strong>SlimFaas/DependsOn</strong> : \"\"\n<ul>\n<li>Comma separated list of deployment names or statefulset names</li>\n<li>Pods will be scaled up only if all pods in this list are in ready state with the minimum number of replicas superior or equal to ReplicasAtStart</li>\n<li>This property is useful if you want to scale up your pods only if your database is ready for example</li>\n</ul>\n</li>\n<li><strong>SlimFaas/SubscribeEvents</strong> : \"\"\n<ul>\n<li>Comma separated list of event names to license the function to receive events. example: \"Public:my-event-name1,Private:my-event-name2,my-event-name3\"</li>\n<li>\"Public:\" or \"Private:\" are prefix that set the event visibility, if not set, \"SlimFaas/DefaultVisibility\" is used</li>\n</ul>\n</li>\n<li><strong>SlimFaas/DefaultVisibility</strong> : \"Public\"\n<ul>\n<li>Public or Private (private can be accessed only by internal namespace https call from pods)</li>\n</ul>\n</li>\n<li><strong>SlimFaas/PathsStartWithVisibility</strong> : \"\"\n<ul>\n<li>Comma separated list of path prefixed by the default visibility. example: \"Private:/mypath/subpath,Public:/mypath2\"</li>\n<li>\"Public:\" or \"Private:\" are prefix that set the path visibility, if not set, \"SlimFaas/DefaultVisibility\" is used</li>\n</ul>\n</li>\n<li><strong>SlimFaas/ExcludeDeploymentsFromVisibilityPrivate</strong> : \"\"\n<ul>\n<li>Comma separated list of deployment names or statefulset names</li>\n<li>Message from that pods will be considered as public. It is useful if you want to exclude some pods from the private visibility, for example for a backend for frontend.</li>\n</ul>\n</li>\n<li><strong>SlimFaas/Configuration</strong> : json configuration default values displayed below\n<ul>\n<li>Allows you to define a configuration for your functions. For example, you can define a timeout for HTTP calls, a retry pattern for timeouts and HTTP status codes.</li>\n</ul>\n</li>\n</ul>\n<pre><code class=\"language-bash\">{\n    \"DefaultSync\":{\n        \"HttpTimeout\": 120, # Timeout in seconds\n        \"TimeoutRetries\": [2,4,8] # Retry pattern in seconds\n        \"HttpStatusRetries\": [500,502,503] # Retry only for 500,502,503 HTTP status codes\n    }\n    \"DefaultAsync\":{\n        \"HttpTimeout\": 120, # Timeout in seconds\n        \"TimeoutRetries\": [2,4,8] # Retry pattern in seconds\n        \"HttpStatusRetries\": [500,502,503] # Retry only for 500,502,503 HTTP status codes\n    },\n    \"DefaultPublish\":{\n        \"HttpTimeout\": 120, # Timeout in seconds\n        \"TimeoutRetries\": [2,4,8] # Retry pattern in seconds\n        \"HttpStatusRetries\": [500,502,503] # Retry only for 500,502,503 HTTP status codes\n    }\n}\n</code></pre>\n<ul>\n<li><strong>SlimFaas/Schedule</strong> : json configuration\n<ul>\n<li>Allows you to define a schedule for your functions. If you want to wake up your infrastructure at 07:00 or for example scale down after 60 seconds of inactivity after 07:00 and scale down after 10 seconds of inactivity after 21:00. Time zones are defined as IANA time zones. The full list is available <a href=\"https://nodatime.org/TimeZones\">here</a></li>\n</ul>\n</li>\n</ul>\n<pre><code class=\"language-bash\">{\n  \"TimeZoneID\":\"Europe/Paris\", # Time Zone ID can be found here: https://nodatime.org/TimeZones\n  \"Default\":{\n    \"WakeUp\":[\"07:00\"], # Wake up your infrastructure at 07:00\n    \"ScaleDownTimeout\":[\n              {\"Time\":\"07:00\",\"Value\":20}, # Scale down after 20 seconds of inactivity after 07:00\n              {\"Time\":\"21:00\",\"Value\":10} # Scale down after 10 seconds of inactivity after 21:00\n            ]\n  }\n}\n</code></pre>\n<h2>Why SlimFaas?</h2>\n<p>We used <strong>OpenFaas</strong> for a long time and we love it.\nBut we encountered many OpenFaas issues:</p>\n<ul>\n<li>Kubernetes scripts are tightly coupled to OpenFaas syntax</li>\n<li>OpenFaas pro is too expensive for our projects</li>\n<li>OpenFaas needs to be installed on a dedicated namespace and configuration was intricate</li>\n<li>OpenFaas monitoring was not compatible with our monitoring solution</li>\n<li>It requires to configure well NATS for managing fail-over</li>\n<li>Queue configuration is not easy</li>\n<li>The aggressive removing of old images from docker.io by OpenFaas team in April 2023 got us some production issues</li>\n</ul>\n<p>We would like to use <strong>Knative</strong> but:</p>\n<ul>\n<li>We cannot use it because of some internal constraints and security issues.</li>\n</ul>\n<p>So we decided to create <strong>SlimFaas</strong> to have a quick and simple replacement proxy solution that can expose Prometheus metrics.\nNow we have a solution not <strong>coupled</strong> to anything. <strong>SlimFaas</strong> is <strong>simple</strong>, <strong>light</strong>, <strong>fast</strong> and <strong>plug and play</strong>!</p>\n<h2>How it works ?</h2>\n<p>Instead of creating many pods, SlimFaas use internally many workers in the same pod:</p>\n<ul>\n<li><strong>SlimWorker</strong>: Manage asynchronous HTTP requests calls to underlying functions</li>\n<li><strong>SlimDataSynchronizationWorker</strong>: Allow to make possible scale up and down SlimData Raft nodes</li>\n<li><strong>HistorySynchronisationWorker</strong>: Manage history of HTTP requests between the pod and kubernetes</li>\n<li><strong>ReplicasSynchronizationWorker</strong>: Manage replicas synchronization between the pod and kubernetes</li>\n<li><strong>ReplicasScaleWorker</strong>: If master, then scale up and down kubernetes pods</li>\n</ul>\n<p><strong>SlimData</strong> is a simple redis like database included inside SlimFaas executable. It is based on <strong>Raft</strong> (https://raft.github.io/) algorithm offered by awesome dotNext library (https://github.com/dotnet/dotNext).\nBy default, <strong>SlimData</strong> use a second HTTP port 3262 to expose its API. Don't expose it and keep it internal.</p>\n<p>SlimFaas requires at least 3 nodes in production. 2 nodes are required to keep the database in a consistent state.</p>\n<p><img src=\"https://github.com/AxaFrance/slimfaas/blob/main/documentation/slimdata.png?raw=true\" alt=\"slimdata.PNG\"></p>\n<p>If you want to use just one pod for testing purpose, you can use this env variable:</p>\n<ul>\n<li>SLIMDATA_CONFIGURATION: '{\"coldStart\":\"true\"}'</li>\n</ul>\n<p>This will allow to start a pod alone as a leader.\nSlimFaas can to scale up and down by using classic Horizontal Pod Autoscaler (HPA).</p>\n<h3>Build with .NET</h3>\n<p>Why .NET?</p>\n<ul>\n<li>.NET is always getting faster and faster : https://www.techempower.com/benchmarks/#section=data-r22</li>\n<li>ASP.NET Core allow to resolve complex use cases with few lines of codes</li>\n<li>.NET is always getting smaller and smaller: https://twitter.com/MStrehovsky/status/1660806238979117056?t=WPrZwi7WrIWi4tjoDUXEgg&#x26;s=19</li>\n</ul>\n<h2>Videos</h2>\n<ul>\n<li>French : https://www.youtube.com/watch?v=Lvd6FCuCZPI</li>\n<li>English: https://youtu.be/hxRfvJhWW1w?si=4LuPgHVsuEVhlhpF</li>\n</ul>\n<h2>What Next?</h2>\n<ol start=\"0\">\n<li>Retry pattern fully controllable with dead letter queue</li>\n<li>Scale up dynamically from SlimFaas in Async Mode</li>\n<li>Scale up dynamically from SlimFaas in Sync Mode (Copy KEDA syntax)</li>\n<li>Aggregate all swaggers from functions in one exposed by SlimFaas</li>\n<li>New pod to \"Wake up\" from External Source (example: Kafka, etc.) using https://cloudevents.io/ as standard https://github.com/cloudevents/sdk-csharp</li>\n<li>Continue Optimization</li>\n</ol>\n<h2>We are a Cloud Native Computing Foundation sandbox project.</h2>\n<p>https://landscape.cncf.io</p>\n<h3>SlimFaas Slack Channel</h3>\n<p>Join us on Slack:\nhttps://cloud-native.slack.com/archives/C08CRC77VDE</p>\n<h3>Trademark Guidelines</h3>\n<p>The Linux Foundation® (TLF) has registered trademarks and uses trademarks. For a list of TLF trademarks, see <a href=\"https://www.linuxfoundation.org/legal/trademark-usage\">Trademark Usage</a>.</p>\n<h2>Code of Conduct</h2>\n<p>SlimFaas project has adopted the <a href=\"https://github.com/cncf/foundation/blob/main/code-of-conduct.md\">CNCF Code of Conduct</a></p>\n","metadata":{}},"__N_SSG":true}