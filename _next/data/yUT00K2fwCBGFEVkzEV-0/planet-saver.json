{"pageProps":{"contentHtml":"<html><head></head><body><h1>SlimFaas Planet Saver <a href=\"https://badge.fury.io/js/%40axa-fr%2Fslimfaas-planet-saver\"><img src=\"https://badge.fury.io/js/%40axa-fr%2Fslimfaas-planet-saver.svg\" alt=\"npm version\"></a></h1>\n<blockquote>\n<p><strong>Important Note</strong>: Starting from <strong>0 replicas</strong> to <strong>1 replica</strong> can be challenging because if no machine is available, the application must wait for a new machine to start. This startup process may exceed typical HTTP timeouts (for example, 7 minutes). <strong>SlimPlanet</strong> (via SlimFaas) solves this issue by providing a user-friendly interface that informs users the backend is starting, while the infrastructure wakes up in the background.</p>\n</blockquote>\n<p><strong>@axa-fr/slimfaas-planet-saver</strong> is a Vanilla JavaScript project to help ‚Äúsave the planet‚Äù by scaling your backends to zero when not in use, and waking them on demand. It is built around <a href=\"https://github.com/SlimPlanet/slimfaas\">SlimFaas</a>, the slimmest and simplest Function-as-a-Service for Kubernetes.</p>\n<p>SlimFaas provides an API to give your frontend detailed information about the state of your backend infrastructure. This makes <strong>@axa-fr/slimfaas-planet-saver</strong> a true <strong>‚Äúmind changer‚Äù</strong> ‚Äî in production, you can have zero replicas running for your API backend, and display a friendly message in the UI that the backend is starting (instead of showing an error). When the backend is ready, the user seamlessly continues their journey.</p>\n<p><img src=\"https://github.com/AxaFrance/SlimFaas/blob/main/documentation/SlimfaasPlanetSaver.gif?raw=true\" alt=\"SlimFaasPlanetSaver.gif\"></p>\n<hr>\n<h2>Why Use @axa-fr/slimfaas-planet-saver?</h2>\n<ul>\n<li><strong>User-Friendly Zero-Replica</strong>: Show users a ‚Äústarting up‚Äù message instead of an error when your backend is scaling from zero.</li>\n<li><strong>Easy Integration</strong>: A lightweight library that quickly plugs into your frontend code.</li>\n<li><strong>Real-Time Monitoring</strong>: Continually checks your SlimFaas environment status and updates the UI when your services are ready.</li>\n<li><strong>Mind Changer</strong>: Lets you remove always-on (idle) replicas. This can save costs and reduce carbon footprint.</li>\n</ul>\n<hr>\n<h2>Installation</h2>\n<p>Install via npm:</p>\n<pre><code class=\"language-bash hljs\"><span class=\"hljs-built_in\">npm</span> install @axa-fr/slimfaas-planet-saver\n</code></pre>\n<hr>\n<h2>Basic Usage (Vanilla JS Example)</h2>\n<pre><code class=\"language-js hljs\"><span class=\"hljs-keyword\">import</span> { <span class=\"hljs-title class_\">SlimFaasPlanetSaver</span> } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'@axa-fr/slimfaas-planet-saver'</span>;\n\n<span class=\"hljs-keyword\">const</span> planetSaver = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">SlimFaasPlanetSaver</span>(<span class=\"hljs-string\">'http://slimfaas.mycompany.com'</span>, {\n    <span class=\"hljs-attr\">interval</span>: <span class=\"hljs-number\">2000</span>,\n    <span class=\"hljs-attr\">fetch</span>: <span class=\"hljs-variable language_\">window</span>.<span class=\"hljs-property\">fetch</span>, <span class=\"hljs-comment\">// or any fetch polyfill</span>\n    <span class=\"hljs-attr\">updateCallback</span>: <span class=\"hljs-function\">(<span class=\"hljs-params\">data</span>) =&gt;</span> {\n        <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-string\">'Update callback data:'</span>, data);\n    },\n    <span class=\"hljs-attr\">errorCallback</span>: <span class=\"hljs-function\">(<span class=\"hljs-params\">error</span>) =&gt;</span> {\n        <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">error</span>(<span class=\"hljs-string\">'Error detected:'</span>, error);\n    },\n    <span class=\"hljs-attr\">overlayStartingMessage</span>: <span class=\"hljs-string\">'üå≥ Starting the environment... üå≥'</span>,\n    <span class=\"hljs-attr\">overlayNoActivityMessage</span>: <span class=\"hljs-string\">'No activity yet ‚Äî environment is sleeping.'</span>,\n    <span class=\"hljs-attr\">overlayErrorMessage</span>: <span class=\"hljs-string\">'An error occurred while starting the environment. Please try again later.'</span>,\n});\n\n<span class=\"hljs-comment\">// Initialize and begin polling</span>\nplanetSaver.<span class=\"hljs-title function_\">initialize</span>();\nplanetSaver.<span class=\"hljs-title function_\">startPolling</span>();\n\n<span class=\"hljs-comment\">// When you no longer need it:</span>\nplanetSaver.<span class=\"hljs-title function_\">cleanup</span>();\n\n</code></pre>\n<p>This example:</p>\n<ol>\n<li>Initializes a SlimFaasPlanetSaver instance with a base URL to your SlimFaas server.</li>\n<li>Configures callbacks for status updates and errors.</li>\n<li>Starts periodic polling to monitor environment readiness.</li>\n</ol>\n<hr>\n<h2>React.js Example</h2>\n<p>Below is a simplified code snippet showing how you might wrap your React app in a <code>PlanetSaver</code> component that checks if your environment is ready before rendering children:</p>\n<pre><code class=\"language-javascript hljs\"><span class=\"hljs-keyword\">import</span> <span class=\"hljs-title class_\">React</span>, { useState, useEffect, useRef } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'react'</span>;\n<span class=\"hljs-keyword\">import</span> { <span class=\"hljs-title class_\">SlimFaasPlanetSaver</span> } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'@axa-fr/slimfaas-planet-saver'</span>;\n\n<span class=\"hljs-keyword\">const</span> <span class=\"hljs-title function_\">PlanetSaver</span> = (<span class=\"hljs-params\">{ children, baseUrl, fetch, noActivityTimeout=<span class=\"hljs-number\">60000</span>, behavior={} }</span>) =&gt; {\n    <span class=\"hljs-keyword\">const</span> [isFirstStart, setIsFirstStart] = <span class=\"hljs-title function_\">useState</span>(<span class=\"hljs-literal\">true</span>);\n    <span class=\"hljs-keyword\">const</span> environmentStarterRef = <span class=\"hljs-title function_\">useRef</span>(<span class=\"hljs-literal\">null</span>);\n\n    <span class=\"hljs-title function_\">useEffect</span>(<span class=\"hljs-function\">() =&gt;</span> {\n        <span class=\"hljs-keyword\">if</span> (!baseUrl) <span class=\"hljs-keyword\">return</span>;\n\n        <span class=\"hljs-keyword\">if</span> (environmentStarterRef.<span class=\"hljs-property\">current</span>) <span class=\"hljs-keyword\">return</span>;\n\n        <span class=\"hljs-keyword\">const</span> instance = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">SlimFaasPlanetSaver</span>(baseUrl, {\n            <span class=\"hljs-attr\">interval</span>: <span class=\"hljs-number\">2000</span>,\n            fetch,\n            behavior,\n            <span class=\"hljs-attr\">updateCallback</span>: <span class=\"hljs-function\">(<span class=\"hljs-params\">data</span>) =&gt;</span> {\n                <span class=\"hljs-comment\">// Filter only the items that block the UI (WakeUp+BockUI)</span>\n                <span class=\"hljs-keyword\">const</span> blockingItems = data.<span class=\"hljs-title function_\">filter</span>(\n                    <span class=\"hljs-function\">(<span class=\"hljs-params\">item</span>) =&gt;</span> instance.<span class=\"hljs-title function_\">getBehavior</span>(item.<span class=\"hljs-property\">Name</span>) === <span class=\"hljs-string\">'WakeUp+BockUI'</span>\n                );\n\n                <span class=\"hljs-comment\">// If all blocking items are ready, set isFirstStart to false</span>\n                <span class=\"hljs-keyword\">const</span> allBlockingReady = blockingItems.<span class=\"hljs-title function_\">every</span>(\n                    <span class=\"hljs-function\">(<span class=\"hljs-params\">item</span>) =&gt;</span> item.<span class=\"hljs-property\">NumberReady</span> &gt;= <span class=\"hljs-number\">1</span>\n                );\n                <span class=\"hljs-keyword\">if</span> (allBlockingReady &amp;&amp; isFirstStart) {\n                    <span class=\"hljs-title function_\">setIsFirstStart</span>(<span class=\"hljs-literal\">false</span>);\n                }\n            },\n            <span class=\"hljs-attr\">errorCallback</span>: <span class=\"hljs-function\">(<span class=\"hljs-params\">error</span>) =&gt;</span> {\n                <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">error</span>(<span class=\"hljs-string\">'Error detected :'</span>, error);\n            },\n            <span class=\"hljs-attr\">overlayStartingMessage</span>: <span class=\"hljs-string\">'üå≥ Starting the environment.... üå≥'</span>,\n            <span class=\"hljs-attr\">overlayNoActivityMessage</span>: <span class=\"hljs-string\">'Waiting activity to start environment...'</span>,\n            <span class=\"hljs-attr\">overlayErrorMessage</span>: <span class=\"hljs-string\">'An error occurred when starting environment. Please contact an administrator.'</span>,\n            <span class=\"hljs-attr\">overlaySecondaryMessage</span>: <span class=\"hljs-string\">'Startup should be fast, but if no machines are available it can take several minutes.'</span>,\n            <span class=\"hljs-attr\">overlayLoadingIcon</span>: <span class=\"hljs-string\">'üåç'</span>,\n            <span class=\"hljs-attr\">overlayErrorSecondaryMessage</span>: <span class=\"hljs-string\">'If the error persists, please contact an administrator.'</span>,\n            noActivityTimeout\n        });\n\n        environmentStarterRef.<span class=\"hljs-property\">current</span> = instance;\n\n        <span class=\"hljs-comment\">// Initialiser les effets de bord</span>\n        instance.<span class=\"hljs-title function_\">initialize</span>();\n        instance.<span class=\"hljs-title function_\">startPolling</span>();\n\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-function\">() =&gt;</span> {\n            instance.<span class=\"hljs-title function_\">cleanup</span>();\n            environmentStarterRef.<span class=\"hljs-property\">current</span> = <span class=\"hljs-literal\">null</span>;\n        };\n    }, [baseUrl]);\n\n    <span class=\"hljs-keyword\">if</span> (isFirstStart) {\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">null</span>;\n    }\n\n    <span class=\"hljs-keyword\">return</span> <span class=\"language-xml\"><span class=\"hljs-tag\">&lt;&gt;</span>{children}<span class=\"hljs-tag\">&lt;/&gt;</span></span>;\n};\n\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">default</span> <span class=\"hljs-title class_\">PlanetSaver</span>;\n\n</code></pre>\n<h3>Usage:</h3>\n<pre><code class=\"language-jsx hljs\"><span class=\"hljs-keyword\">const</span> <span class=\"hljs-attr\">behavior</span>: {\n    <span class=\"hljs-string\">\"api-speech-to-text\"</span>: <span class=\"hljs-string\">\"WakeUp\"</span>,\n    <span class=\"hljs-string\">\"heavy-pdf-service\"</span>: <span class=\"hljs-string\">\"WakeUp+BockUI\"</span>,\n    <span class=\"hljs-string\">\"deprecated-service\"</span>: <span class=\"hljs-string\">\"None\"</span>\n}\n\n&lt;<span class=\"hljs-title class_\">PlanetSaver</span> baseUrl=<span class=\"hljs-string\">\"http://slimfaas.mycompany.com\"</span> fetch={<span class=\"hljs-variable language_\">window</span>.<span class=\"hljs-property\">fetch</span>} behavior={behavior}&gt;\n  <span class=\"language-xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">App</span> /&gt;</span></span>\n&lt;/<span class=\"hljs-title class_\">PlanetSaver</span>&gt;\n</code></pre>\n<hr>\n<h2>Running the Demo Locally</h2>\n<p>To see @axa-fr/slimfaas-planet-saver in action:</p>\n<pre><code class=\"language-bash hljs\">git <span class=\"hljs-built_in\">clone</span> https://github.com/SlimPlanet/slimfaas.git\n<span class=\"hljs-built_in\">cd</span> slimfaas/src/SlimFaasPlanetSaver\nnpm install\nnpm run dev\n</code></pre>\n<p>Then open your browser at the address shown in the console to view the demo.</p>\n<hr>\n<h2>Configuration Options</h2>\n<p>When you create a <code>new SlimFaasPlanetSaver(baseUrl, options)</code>, you can provide the following optional properties in the <code>options</code> object:</p>\n<table>\n<thead>\n<tr>\n<th>Property</th>\n<th>Type</th>\n<th>Default</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>updateCallback</td>\n<td><code>(data: any[]) =&gt; void</code></td>\n<td><code>() =&gt; {}</code></td>\n<td>Function called after a successful fetch of the functions‚Äô status. The array data includes objects with info about each function, for example: <code>[{ Name: 'myFunc', NumberReady: 1 }, ...]</code>.</td>\n</tr>\n<tr>\n<td>errorCallback</td>\n<td><code>(errorMessage: string) =&gt; void</code></td>\n<td><code>() =&gt; {}</code></td>\n<td>Function called if an error occurs during the status fetch (e.g., network error). Receives an errorMessage string.</td>\n</tr>\n<tr>\n<td>interval</td>\n<td><code>number</code></td>\n<td><code>5000</code></td>\n<td>How frequently (in ms) the polling should run.</td>\n</tr>\n<tr>\n<td>overlayStartingMessage</td>\n<td><code>string</code></td>\n<td><code>\"üå≥ Starting the environment.... üå≥\"</code></td>\n<td>Main message shown on the overlay when the environment is waking up.</td>\n</tr>\n<tr>\n<td>overlayNoActivityMessage</td>\n<td><code>string</code></td>\n<td><code>\"Waiting activity to start environment...\"</code></td>\n<td>Message shown if there is no user activity (mouse movement) for too long, but the environment is not ready yet.</td>\n</tr>\n<tr>\n<td>overlayErrorMessage</td>\n<td><code>string</code></td>\n<td><code>\"An error occurred while starting the environment.\"</code></td>\n<td>Main message shown on the overlay if an error occurs (e.g., network error).</td>\n</tr>\n<tr>\n<td>overlaySecondaryMessage</td>\n<td><code>string</code></td>\n<td><code>\"Startup should be fast, but if no machines are available it can take several minutes.\"</code></td>\n<td>Secondary message shown on the overlay when the environment is waking up.</td>\n</tr>\n<tr>\n<td>overlayErrorSecondaryMessage</td>\n<td><code>string</code></td>\n<td><code>\"If the error persists, please contact an administrator.\"</code></td>\n<td>Secondary message shown on the overlay when an error occurs.</td>\n</tr>\n<tr>\n<td>overlayLoadingIcon</td>\n<td><code>string</code></td>\n<td><code>\"üåç\"</code></td>\n<td>Text or icon shown on the overlay. By default, it is animated to spin.</td>\n</tr>\n<tr>\n<td>noActivityTimeout</td>\n<td><code>number</code></td>\n<td><code>60000</code></td>\n<td>How long (in ms) to wait for mouse movement before concluding there is no activity. If no activity is detected, a different overlay message is displayed.</td>\n</tr>\n<tr>\n<td>wakeUpTimeout</td>\n<td><code>number</code></td>\n<td><code>60000</code></td>\n<td>If a function was recently ‚Äúwoken up,‚Äù we‚Äôll skip re-calling wake-up for that function within this timeout window (in ms).</td>\n</tr>\n<tr>\n<td>fetch</td>\n<td><code>typeof fetch</code></td>\n<td>Global fetch</td>\n<td>Custom fetch function if you want to provide your own (e.g., for SSR, or if your environment doesn't have a global fetch).</td>\n</tr>\n<tr>\n<td>behavior</td>\n<td><code>{ [functionName: string]: 'WakeUp+BockUI' | 'WakeUp' | 'None' }</code></td>\n<td><em>Not set; defaults each function to \"WakeUp+BockUI\" if unspecified</em></td>\n<td>Allows you to override how each function is handled: 1. <code>\"WakeUp+BockUI\"</code>: wakes the function and blocks the UI with the overlay until it‚Äôs ready. 2. <code>\"WakeUp\"</code>: wakes without blocking the UI. 3. <code>\"None\"</code>: no wake-up call.</td>\n</tr>\n</tbody>\n</table>\n<h3>Notes on Behavior</h3>\n<p>If a function is <strong>not</strong> specified in the behavior map, it defaults to <code>\"WakeUp+BockUI\"</code>.</p>\n<ul>\n<li><code>\"WakeUp+BockUI\"</code> means the overlay will be shown until that function is <code>NumberReady &gt;= 1</code>.</li>\n<li><code>\"WakeUp\"</code> means we attempt to wake up the function, but do not keep the overlay shown specifically for that function.</li>\n<li><code>\"None\"</code> means the function will neither be woken up nor block the UI.</li>\n</ul>\n<h3>Lifecycle</h3>\n<ol>\n<li>\n<p><strong>Initialize</strong>\nCall <code>instance.initialize()</code> to create the overlay elements, inject styles, and bind event listeners (e.g., for mouse movement).</p>\n</li>\n<li>\n<p><strong>Start Polling</strong>\nCall <code>instance.startPolling()</code> to begin the periodic checks of the environment. If the environment is not ready, the overlay will appear.</p>\n</li>\n<li>\n<p><strong>Stop Polling / Cleanup</strong>\nWhen your component unmounts or you no longer need to monitor the environment, call <code>instance.cleanup()</code>. This removes the overlay, styles, and any timers or event listeners.</p>\n</li>\n</ol>\n</body></html>","metadata":{}},"__N_SSG":true}