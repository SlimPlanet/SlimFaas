{"pageProps":{"contentHtml":"<html><head></head><body><h1>SlimFaas Functions (Sync &amp; Async)</h1>\n<p>SlimFaas offers <strong>two main ways</strong> to invoke functions: <strong>synchronous</strong> and <strong>asynchronous</strong> HTTP calls.\nBelow is an overview of each.</p>\n<hr>\n<h2>1. Synchronous Functions</h2>\n<p>Synchronous calls block until the underlying function pod handles the request and returns a response.</p>\n<ul>\n<li>\n<p><strong>Route</strong>:\n<code>GET/POST/PUT/... http://&lt;slimfaas&gt;/function/&lt;functionName&gt;/&lt;path&gt;</code></p>\n</li>\n<li>\n<p><strong>Example</strong>:\nGET <a href=\"http://localhost:30021/function/fibonacci1/hello/guillaume\">http://localhost:30021/function/fibonacci1/hello/guillaume</a> → 200 (OK) with response from fibonacci1</p>\n</li>\n</ul>\n<p>If your function has scaled to zero, SlimFaas automatically <strong>wakes it up</strong> and waits until at least one replica is ready (subject to internal timeouts).</p>\n<hr>\n<h2>2. Asynchronous Functions</h2>\n<p>Asynchronous calls return immediately (HTTP 202 or 201), while SlimFaas queues the request and processes it in the background.</p>\n<ul>\n<li>\n<p><strong>Route</strong>:\n<code>GET/POST/PUT/... http://&lt;slimfaas&gt;/async-function/&lt;functionName&gt;/&lt;path&gt;</code></p>\n</li>\n<li>\n<p><strong>Example</strong>:\nGET <a href=\"http://localhost:30021/async-function/fibonacci1/hello/guillaume\">http://localhost:30021/async-function/fibonacci1/hello/guillaume</a> → 202 (Accepted), handled in background\nsynchronous mode also allows:</p>\n</li>\n<li>\n<p><strong>Limiting parallel requests</strong> via annotations (e.g., <code>SlimFaas/NumberParallelRequest</code>).</p>\n</li>\n<li>\n<p><strong>Retry pattern</strong> on timeouts or specific HTTP status codes.</p>\n</li>\n</ul>\n<hr>\n<h2>3. Wake Function</h2>\n<p>You can explicitly “wake up” a function without invoking a specific route:</p>\n<ul>\n<li>\n<p><strong>Route</strong>:\n<code>GET http://&lt;slimfaas&gt;/wake-function/&lt;functionName&gt;</code></p>\n</li>\n<li>\n<p><strong>Response</strong>:\n<code>204 (No Content)</code></p>\n</li>\n</ul>\n<p>This is handy if you want to ensure the function is running before real traffic arrives.</p>\n<hr>\n<h2>4. Listing Functions</h2>\n<p>SlimFaas exposes a route to check the readiness status of all registered functions:</p>\n<ul>\n<li>\n<p><strong>Route</strong>:\n<code>GET http://&lt;slimfaas&gt;/status-functions</code></p>\n</li>\n<li>\n<p><strong>Response</strong>:\nAn array of objects with details like <code>NumberReady</code>, <code>numberRequested</code>, <code>PodType</code>, <code>Visibility</code>, etc.</p>\n</li>\n</ul>\n<pre><code class=\"language-json hljs\">[\n    {\n      <span class=\"hljs-string\">\"NumberReady\"</span>: <span class=\"hljs-number\">1</span>,\n      <span class=\"hljs-string\">\"numberRequested\"</span>: <span class=\"hljs-number\">1</span>,\n      <span class=\"hljs-string\">\"PodType\"</span>: <span class=\"hljs-string\">\"Deployment\"</span>,\n      <span class=\"hljs-string\">\"Visibility\"</span>: <span class=\"hljs-string\">\"Public\"</span>,\n      <span class=\"hljs-string\">\"Name\"</span>: <span class=\"hljs-string\">\"fibonacci1\"</span>\n    },\n    ...\n]\n</code></pre>\n<h2>5. Private vs. Public Functions</h2>\n<p>By default, functions are <strong>Public</strong> (accessible from anywhere). You can specify them as <strong>Private</strong>—restricting access to calls originating from within the same namespace.</p>\n<pre><code class=\"language-yaml hljs\"><span class=\"hljs-params\">metadata:</span>\n    <span class=\"hljs-params\">annotations:</span>\n        SlimFaas<span class=\"hljs-operator\">/</span><span class=\"hljs-params\">DefaultVisibility:</span> <span class=\"hljs-string\">\"Private\"</span>\n        <span class=\"hljs-comment\"># or define paths:</span>\n        SlimFaas<span class=\"hljs-operator\">/</span><span class=\"hljs-params\">PathsStartWithVisibility:</span> <span class=\"hljs-string\">\"Private:/mypath,Public:/otherpath\"</span>\n        SlimFaas<span class=\"hljs-operator\">/</span><span class=\"hljs-params\">DefaultTrusted:</span> <span class=\"hljs-string\">\"Trusted\"</span>\n</code></pre>\n<p>This helps you control which services can call certain endpoints.</p>\n<p>An <strong>Untrusted</strong> function will be considered as outside the namespace and will not be able to access Private actions.  By default, a function is <strong>Trusted</strong>.</p>\n<pre><code class=\"language-yaml hljs\"><span class=\"hljs-params\">metadata:</span>\n    <span class=\"hljs-params\">annotations:</span>\n        SlimFaas<span class=\"hljs-operator\">/</span><span class=\"hljs-params\">DefaultTrusted:</span> <span class=\"hljs-string\">\"Trusted\"</span> <span class=\"hljs-comment\"># Trusted or Untrusted</span>\n</code></pre>\n<h2>6. Function Configuration</h2>\n<p>You can fine-tune sync/async HTTP timeouts, retries, and more using JSON config in <code>SlimFaas/Configuration</code>:</p>\n<pre><code class=\"language-json hljs\">{\n  <span class=\"hljs-string\">\"DefaultSync\"</span>: {\n    <span class=\"hljs-string\">\"HttpTimeout\"</span>: <span class=\"hljs-number\">120</span>,\n    <span class=\"hljs-string\">\"TimeoutRetries\"</span>: [<span class=\"hljs-number\">2</span>,<span class=\"hljs-number\">4</span>,<span class=\"hljs-number\">8</span>],\n    <span class=\"hljs-string\">\"HttpStatusRetries\"</span>: [<span class=\"hljs-number\">500</span>,<span class=\"hljs-number\">502</span>,<span class=\"hljs-number\">503</span>]\n  },\n  <span class=\"hljs-string\">\"DefaultAsync\"</span>: {\n    <span class=\"hljs-string\">\"HttpTimeout\"</span>: <span class=\"hljs-number\">120</span>,\n    <span class=\"hljs-string\">\"TimeoutRetries\"</span>: [<span class=\"hljs-number\">2</span>,<span class=\"hljs-number\">4</span>,<span class=\"hljs-number\">8</span>],\n    <span class=\"hljs-string\">\"HttpStatusRetries\"</span>: [<span class=\"hljs-number\">500</span>,<span class=\"hljs-number\">502</span>,<span class=\"hljs-number\">503</span>]\n  },\n  <span class=\"hljs-string\">\"DefaultPublish\"</span>: {\n    <span class=\"hljs-string\">\"HttpTimeout\"</span>: <span class=\"hljs-number\">120</span>,\n    <span class=\"hljs-string\">\"TimeoutRetries\"</span>: [<span class=\"hljs-number\">2</span>,<span class=\"hljs-number\">4</span>,<span class=\"hljs-number\">8</span>],\n    <span class=\"hljs-string\">\"HttpStatusRetries\"</span>: [<span class=\"hljs-number\">500</span>,<span class=\"hljs-number\">502</span>,<span class=\"hljs-number\">503</span>]\n  }\n}\n</code></pre>\n<p>These settings let you define how aggressively to retry failing calls, which statuses to retry, and more.</p>\n<hr>\n<h2>7. The DependsOn Annotation</h2>\n<p>You can also add a <code>DependsOn</code> annotation to specify that your function should wait for certain other pods to be ready before it scales up from zero. For example:</p>\n<pre><code class=\"language-yaml hljs\"><span class=\"hljs-params\">metadata:</span>\n    <span class=\"hljs-params\">annotations:</span>\n        SlimFaas<span class=\"hljs-operator\">/</span><span class=\"hljs-params\">Function:</span> <span class=\"hljs-string\">\"true\"</span>\n        SlimFaas<span class=\"hljs-operator\">/</span><span class=\"hljs-params\">ReplicasMin:</span> <span class=\"hljs-string\">\"0\"</span>\n        SlimFaas<span class=\"hljs-operator\">/</span><span class=\"hljs-params\">ReplicasAtStart:</span> <span class=\"hljs-string\">\"1\"</span>\n        <span class=\"hljs-comment\"># ...</span>\n        SlimFaas<span class=\"hljs-operator\">/</span><span class=\"hljs-params\">DependsOn:</span> <span class=\"hljs-string\">\"mysql,fibonacci2\"</span>\n</code></pre>\n<ul>\n<li><strong>mysql</strong> and <strong>fibonacci2</strong> are the names of other deployments/statefulsets in the same namespace.</li>\n<li>SlimFaas will not scale the current function (e.g., <code>fibonacci1</code>) unless all pods listed in <code>DependsOn</code> are in a ready state and meet their own minimum replicas.</li>\n</ul>\n<p>This is useful in scenarios where your function must not start until a database or another dependent function is confirmed running.</p>\n<h2>8. Scheduling Function Wake-Up and Scale-Down</h2>\n<p>If you want your function to automatically wake at a specific time or change its scale-down timeout based on the time of day, use the SlimFaas/Schedule annotation with a JSON configuration. This feature is especially useful for workloads with predictable peak/off-peak hours.</p>\n<p>Example Annotation</p>\n<pre><code class=\"language-yaml hljs\">metadata:\n  annotations:\n    SlimFaas/Schedule: &gt;\n      {\n        \"TimeZoneID\": <span class=\"hljs-string\">\"Europe/Paris\"</span>,\n        <span class=\"hljs-string\">\"Default\"</span>: {\n          \"WakeUp\": [<span class=\"hljs-string\">\"07:00\"</span>],\n          <span class=\"hljs-string\">\"ScaleDownTimeout\"</span>: [\n            { \"<span class=\"hljs-selector-tag\">Time</span>\": <span class=\"hljs-string\">\"07:00\"</span>, <span class=\"hljs-string\">\"Value\"</span>: <span class=\"hljs-number\">20</span> },\n            { \"<span class=\"hljs-selector-tag\">Time</span>\": <span class=\"hljs-string\">\"21:00\"</span>, <span class=\"hljs-string\">\"Value\"</span>: <span class=\"hljs-number\">10</span> }\n          ]\n        }\n      }\n</code></pre>\n<h3>Configuration Details</h3>\n<ul>\n<li>\n<p><code>TimeZoneID</code>\nDefines which IANA time zone to use (e.g., <code>\"Europe/Paris\"</code>).\nYou can see the full list of valid time zone IDs here: <a href=\"https://nodatime.org/TimeZones\">https://nodatime.org/TimeZones</a></p>\n</li>\n<li>\n<p><code>WakeUp</code>\nAn array of times (<code>HH:mm</code>) at which the function should be woken up automatically.\nFor example, <code>\"07:00\"</code> means that each day at 07:00 local time, the function will scale to its <code>ReplicasAtStart</code> value (rather than remain at zero).</p>\n</li>\n<li>\n<p><code>ScaleDownTimeout</code>\nAn array of objects containing:</p>\n<ul>\n<li><code>Time</code>: A local time string (e.g., <code>\"07:00\"</code>).</li>\n<li><code>Value</code>: The inactivity timeout (in seconds) that applies after this time.\n<ul>\n<li>For instance, <code>{\"Time\":\"07:00\",\"Value\":20}</code> sets a 20-second inactivity timeout from 07:00 until another time checkpoint is reached.</li>\n<li><code>{\"Time\":\"21:00\",\"Value\":10}</code> sets a 10-second inactivity timeout from 21:00 onward.</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h3>How It Works</h3>\n<ol>\n<li><strong>At each specified time</strong>, SlimFaas updates the function’s wake-up behavior or scale-down timeout in accordance with the schedule.</li>\n<li><strong>Waking up</strong> a function ensures at least one replica is running at that time.</li>\n<li><strong>ScaleDownTimeout</strong> adjusts how quickly the function is allowed to scale back to zero if there is no traffic.</li>\n</ol>\n<h3>Example Use Case</h3>\n<ul>\n<li><strong>07:00</strong>: Wake up the function to be immediately available for peak morning traffic. The inactivity timeout becomes 20 seconds. If no traffic arrives for 20 seconds, the function could scale back to zero.</li>\n<li><strong>21:00</strong>: Reduce the inactivity timeout to 10 seconds, allowing a quicker scale-down in the evening/off-peak period.</li>\n</ul>\n<p>This scheduling feature helps you maintain availability during predictable high-demand periods while efficiently saving resources during low-demand times.</p>\n<h2>9. Key Annotations for Functions</h2>\n<p>Before you start calling functions, ensure you add the necessary annotations to your Kubernetes Deployments or StatefulSets:</p>\n<ul>\n<li>\n<p><strong><code>SlimFaas/Function: \"true\"</code></strong>\nActivates SlimFaas auto-scaling and routing for this pod. Without this annotation, SlimFaas will ignore the pod.</p>\n</li>\n<li>\n<p><strong><code>SlimFaas/ReplicasMin: \"0\"</code></strong>\nThe minimum number of replicas to maintain for the function. Setting <code>0</code> allows the function to scale down to zero after inactivity.</p>\n</li>\n<li>\n<p><strong><code>SlimFaas/ReplicasAtStart: \"1\"</code></strong>\nThe number of replicas to initially wake up to when traffic arrives or when manually woken. Typically set to <code>1</code>.</p>\n</li>\n<li>\n<p><strong><code>SlimFaas/TimeoutSecondBeforeSetReplicasMin: \"300\"</code></strong>\nThe number of <strong>inactivity seconds</strong> after which the function will scale down to <code>ReplicasMin</code>. (Default is often <code>300</code> seconds.)</p>\n</li>\n<li>\n<p><strong><code>SlimFaas/NumberParallelRequest: \"10\"</code></strong>\nThe maximum number of concurrent requests allowed for each replica. Additional requests will queue until a slot frees up.</p>\n</li>\n</ul>\n<pre><code class=\"language-yaml hljs\"><span class=\"hljs-comment\"># Example snippet from a Deployment</span>\n<span class=\"hljs-params\">metadata:</span>\n    <span class=\"hljs-params\">annotations:</span>\n        SlimFaas<span class=\"hljs-operator\">/</span><span class=\"hljs-params\">Function:</span> <span class=\"hljs-string\">\"true\"</span>\n        SlimFaas<span class=\"hljs-operator\">/</span><span class=\"hljs-params\">ReplicasMin:</span> <span class=\"hljs-string\">\"0\"</span>\n        SlimFaas<span class=\"hljs-operator\">/</span><span class=\"hljs-params\">ReplicasAtStart:</span> <span class=\"hljs-string\">\"1\"</span>\n        SlimFaas<span class=\"hljs-operator\">/</span><span class=\"hljs-params\">TimeoutSecondBeforeSetReplicasMin:</span> <span class=\"hljs-string\">\"300\"</span>\n        SlimFaas<span class=\"hljs-operator\">/</span><span class=\"hljs-params\">NumberParallelRequest:</span> <span class=\"hljs-string\">\"10\"</span>\n</code></pre>\n</body></html>","metadata":{}},"__N_SSG":true}