{"pageProps":{"contentHtml":"<h1>SlimFaas Planet Saver <a href=\"https://badge.fury.io/js/%40axa-fr%2Fslimfaas-planet-saver\"><img src=\"https://badge.fury.io/js/%40axa-fr%2Fslimfaas-planet-saver.svg\" alt=\"npm version\"></a></h1>\n<blockquote>\n<p><strong>Important Note</strong>: Starting from <strong>0 replicas</strong> to <strong>1 replica</strong> can be challenging because if no machine is available, the application must wait for a new machine to start. This startup process may exceed typical HTTP timeouts (for example, 7 minutes). <strong>SlimPlanet</strong> (via SlimFaas) solves this issue by providing a user-friendly interface that informs users the backend is starting, while the infrastructure wakes up in the background.</p>\n</blockquote>\n<p><strong>@axa-fr/slimfaas-planet-saver</strong> is a Vanilla JavaScript project to help ‚Äúsave the planet‚Äù by scaling your backends to zero when not in use, and waking them on demand. It is built around <a href=\"https://github.com/SlimPlanet/slimfaas\">SlimFaas</a>, the slimmest and simplest Function-as-a-Service for Kubernetes.</p>\n<p>SlimFaas provides an API to give your frontend detailed information about the state of your backend infrastructure. This makes <strong>@axa-fr/slimfaas-planet-saver</strong> a true <strong>‚Äúmind changer‚Äù</strong> ‚Äî in production, you can have zero replicas running for your API backend, and display a friendly message in the UI that the backend is starting (instead of showing an error). When the backend is ready, the user seamlessly continues their journey.</p>\n<p><img src=\"https://github.com/AxaFrance/SlimFaas/blob/main/documentation/SlimfaasPlanetSaver.gif?raw=true\" alt=\"SlimFaasPlanetSaver.gif\"></p>\n<hr>\n<h2>Why Use @axa-fr/slimfaas-planet-saver?</h2>\n<ul>\n<li><strong>User-Friendly Zero-Replica</strong>: Show users a ‚Äústarting up‚Äù message instead of an error when your backend is scaling from zero.</li>\n<li><strong>Easy Integration</strong>: A lightweight library that quickly plugs into your frontend code.</li>\n<li><strong>Real-Time Monitoring</strong>: Continually checks your SlimFaas environment status and updates the UI when your services are ready.</li>\n<li><strong>Mind Changer</strong>: Lets you remove always-on (idle) replicas. This can save costs and reduce carbon footprint.</li>\n</ul>\n<hr>\n<h2>Installation</h2>\n<p>Install via npm:</p>\n<pre><code class=\"language-bash\">npm install @axa-fr/slimfaas-planet-saver\n</code></pre>\n<hr>\n<h2>Basic Usage (Vanilla JS Example)</h2>\n<pre><code class=\"language-js\">import { SlimFaasPlanetSaver } from '@axa-fr/slimfaas-planet-saver';\n\nconst planetSaver = new SlimFaasPlanetSaver('http://slimfaas.mycompany.com', {\n    interval: 2000,\n    fetch: window.fetch, // or any fetch polyfill\n    updateCallback: (data) => {\n        console.log('Update callback data:', data);\n    },\n    errorCallback: (error) => {\n        console.error('Error detected:', error);\n    },\n    overlayStartingMessage: 'üå≥ Starting the environment... üå≥',\n    overlayNoActivityMessage: 'No activity yet ‚Äî environment is sleeping.',\n    overlayErrorMessage: 'An error occurred while starting the environment. Please try again later.',\n});\n\n// Initialize and begin polling\nplanetSaver.initialize();\nplanetSaver.startPolling();\n\n// When you no longer need it:\nplanetSaver.cleanup();\n\n</code></pre>\n<p>This example:</p>\n<ol>\n<li>Initializes a SlimFaasPlanetSaver instance with a base URL to your SlimFaas server.</li>\n<li>Configures callbacks for status updates and errors.</li>\n<li>Starts periodic polling to monitor environment readiness.</li>\n</ol>\n<hr>\n<h2>React.js Example</h2>\n<p>Below is a simplified code snippet showing how you might wrap your React app in a <code>PlanetSaver</code> component that checks if your environment is ready before rendering children:</p>\n<pre><code class=\"language-javascript\">import React, { useState, useEffect, useRef } from 'react';\nimport { SlimFaasPlanetSaver } from \"@axa-fr/slimfaas-planet-saver\";\n\nconst PlanetSaver = ({ children, baseUrl, fetch }) => {\n  const [isFirstStart, setIsFirstStart] = useState(true);\n  const environmentStarterRef = useRef(null);\n\n  useEffect(() => {\n    if (!baseUrl) return;\n    if (environmentStarterRef.current) return;\n\n    const instance = new SlimFaasPlanetSaver(baseUrl, {\n      interval: 2000,\n      fetch,\n      updateCallback: (data) => {\n        const allReady = data.every((item) => item.NumberReady >= 1);\n        if (allReady &#x26;&#x26; isFirstStart) {\n          setIsFirstStart(false);\n        }\n      },\n      errorCallback: (error) => {\n        console.error('Error detected :', error);\n      },\n      overlayStartingMessage: 'üå≥ Starting the environment.... üå≥',\n      overlayNoActivityMessage: 'Waiting for activity to start environment...',\n      overlayErrorMessage: 'An error occurred when starting the environment. Please contact an administrator.',\n      overlaySecondaryMessage: 'Startup should be fast, but if no machines are available it can take several minutes.',\n      overlayLoadingIcon: 'üåç',\n      overlayErrorSecondaryMessage: 'If the error persists, please contact an administrator.'\n    });\n\n    environmentStarterRef.current = instance;\n    instance.initialize();\n    instance.startPolling();\n\n    return () => {\n      instance.cleanup();\n      environmentStarterRef.current = null;\n    };\n  }, [baseUrl, fetch, isFirstStart]);\n\n  // Until the environment is confirmed ready, don't render children\n  if (isFirstStart) {\n    return null;\n  }\n\n  return &#x3C;>{children}&#x3C;/>;\n};\n\nexport default PlanetSaver;\n</code></pre>\n<hr>\n<h2>Usage:</h2>\n<pre><code class=\"language-jsx\">&#x3C;PlanetSaver baseUrl=\"http://slimfaas.mycompany.com\" fetch={window.fetch}>\n  &#x3C;App />\n&#x3C;/PlanetSaver>\n</code></pre>\n<hr>\n<h2>Running the Demo Locally</h2>\n<p>To see @axa-fr/slimfaas-planet-saver in action:</p>\n<pre><code class=\"language-bash\">git clone https://github.com/SlimPlanet/slimfaas.git\ncd slimfaas/src/SlimFaasPlanetSaver\nnpm install\nnpm run dev\n</code></pre>\n<p>Then open your browser at the address shown in the console to view the demo.</p>\n","metadata":{}},"__N_SSG":true}