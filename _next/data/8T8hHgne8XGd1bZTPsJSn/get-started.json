{"pageProps":{"contentHtml":"<h1>Getting Started with SlimFaas</h1>\n<p>This guide covers two primary ways to start using SlimFaas:</p>\n<ol>\n<li><strong>Kubernetes</strong> (including local clusters via Docker Desktop)</li>\n<li><strong>Docker Compose</strong> (for quick local testing)</li>\n<li><strong>Manual Installation</strong> (for your own Kubernetes setup)</li>\n</ol>\n<p>You can also find <a href=\"#manual-installation-on-kubernetes\">advanced installation details</a> below.</p>\n<hr>\n<h2>1. Kubernetes Quick Start</h2>\n<p>Below is an example workflow for running SlimFaas on Kubernetes locally (e.g., via Docker Desktop):</p>\n<pre><code class=\"language-bash\">git clone https://github.com/AxaFrance/slimfaas.git\ncd slimfaas/demo\n\n# Deploy SlimFaas (StatefulSet) and related ServiceAccount\nkubectl apply -f deployment-slimfaas.yml\n\n# Expose SlimFaas Service as NodePort or Ingress\nkubectl apply -f slimfaas-nodeport.yml\n# Alternatively:\n# kubectl apply -f slimfaas-ingress.yml\n\n# Deploy three sample Fibonacci functions\nkubectl apply -f deployment-functions.yml\n\n# Deploy MySQL (used by the Fibonacci functions)\nkubectl apply -f deployment-mysql.yml\n\n# (Optional) Run a single-page demo webapp on http://localhost:8000\ndocker run -d -p 8000:8000 --rm axaguildev/fibonacci-webapp:latest\n</code></pre>\n<h3>Test Synchronous Calls</h3>\n<p>If you used slimfaas-nodeport.yml, port 30021 might be exposed. You can call your functions via SlimFaas:</p>\n<ul>\n<li>GET http://localhost:30021/function/fibonacci1/hello/guillaume → HTTP 200 (OK)</li>\n<li>GET http://localhost:30021/function/fibonacci2/hello/elodie → HTTP 200 (OK)</li>\n<li>GET http://localhost:30021/function/fibonacci3/hello/julie → HTTP 200 (OK)</li>\n<li>GET http://localhost:30021/function/fibonacci4/hello/julie → HTTP 404 (Not Found)</li>\n</ul>\n<h3>Test Asynchronous Calls</h3>\n<ul>\n<li>GET http://localhost:30021/async-function/fibonacci1/hello/guillaume → HTTP 202 (Accepted)</li>\n<li>GET http://localhost:30021/async-function/fibonacci2/hello/elodie → HTTP 202 (Accepted)</li>\n<li>GET http://localhost:30021/async-function/fibonacci3/hello/julie → HTTP 202 (Accepted)</li>\n<li>GET http://localhost:30021/async-function/fibonacci4/hello/julie → HTTP 404 (Not Found)</li>\n</ul>\n<h3>Wake Up a Function</h3>\n<ul>\n<li>GET http://localhost:30021/wake-function/fibonacci1 → HTTP 204 (No Content)</li>\n<li>GET http://localhost:30021/wake-function/fibonacci2 → HTTP 204 (No Content)</li>\n<li>GET http://localhost:30021/wake-function/fibonacci3 → HTTP 204 (No Content)</li>\n<li>GET http://localhost:30021/wake-function/fibonacci4 → HTTP 204 (No Content)</li>\n</ul>\n<h3>List All Functions</h3>\n<ul>\n<li>GET http://localhost:30021/status-functions</li>\n</ul>\n<pre><code class=\"language-json\">[\n  {\"NumberReady\":1,\"numberRequested\":1,\"PodType\":\"Deployment\",\"Visibility\":\"Public\",\"Name\":\"fibonacci1\"},\n  {\"NumberReady\":1,\"numberRequested\":1,\"PodType\":\"Deployment\",\"Visibility\":\"Public\",\"Name\":\"fibonacci2\"},\n  {\"NumberReady\":1,\"numberRequested\":1,\"PodType\":\"Deployment\",\"Visibility\":\"Public\",\"Name\":\"fibonacci3\"},\n  {\"NumberReady\":2,\"numberRequested\":2,\"PodType\":\"Deployment\",\"Visibility\":\"Private\",\"Name\":\"fibonacci4\"}\n]\n</code></pre>\n<h3>Single Page WebApp Demo</h3>\n<p>If you ran the Fibonacci webapp container above:</p>\n<p>Browse to http://localhost:8000</p>\n<hr>\n<h2>2. Docker Compose Quick Start</h2>\n<pre><code class=\"language-bash\">git clone https://github.com/AxaFrance/slimfaas.git\ncd slimfaas\ndocker-compose up\n</code></pre>\n<p>When it’s ready:</p>\n<ul>\n<li>GET http://slimfaas/function/fibonacci/hello/guillaume</li>\n</ul>\n<p>Enjoy SlimFaas!</p>\n<hr>\n<h2>3. Manual Installation on Kubernetes</h2>\n<p>You can also set up SlimFaas manually by adapting the sample manifests below. The key steps are:</p>\n<ol>\n<li><strong>Deploy SlimFaas</strong> (as a StatefulSet or Deployment).</li>\n<li><strong>Expose SlimFaas</strong> on an internal or external route (NodePort, Ingress, etc.).</li>\n<li><strong>Annotate</strong> your function pods/Deployments with SlimFaas annotations to enable auto-scaling and routing.</li>\n</ol>\n<p>Example partial YAML (from <em>service-account-slimfaas.yml</em>):</p>\n<pre><code class=\"language-yaml\">---\napiVersion: v1\nkind: ServiceAccount\nmetadata:\n  name: slimfaas\n  namespace: slimfaas-demo\n---\napiVersion: rbac.authorization.k8s.io/v1\nkind: ClusterRole\nmetadata:\n  name: namespace-lister\nrules:\n  - apiGroups: [\"\"]\n    resources: [\"namespaces\", \"pods\"]\n    verbs: [\"list\"]\n---\napiVersion: rbac.authorization.k8s.io/v1\nkind: ClusterRoleBinding\nmetadata:\n  name: slimfaas-namespace-lister\nsubjects:\n  - kind: ServiceAccount\n    name: slimfaas\n    namespace: slimfaas-demo\nroleRef:\n  kind: ClusterRole\n  name: namespace-lister\n  apiGroup: rbac.authorization.k8s.io\n---\napiVersion: rbac.authorization.k8s.io/v1\nkind: Role\nmetadata:\n  name: deployment-statefulset-manager\n  namespace: slimfaas-demo\nrules:\n  - apiGroups: [\"apps\"]\n    resources: [\"deployments\", \"statefulsets\"]\n    verbs: [\"get\", \"list\", \"watch\", \"create\", \"update\", \"patch\", \"delete\"]\n  - apiGroups: [\"apps\"]\n    resources: [\"deployments/scale\", \"statefulsets/scale\"]\n    verbs: [\"get\", \"update\", \"patch\"]\n  - apiGroups: [\"batch\"]\n    resources: [\"jobs\"]\n    verbs: [\"get\", \"list\", \"watch\", \"create\", \"update\", \"patch\", \"delete\"]\n---\napiVersion: rbac.authorization.k8s.io/v1\nkind: RoleBinding\nmetadata:\n  name: slimfaas-deployment-statefulset-manager\n  namespace: slimfaas-demo\nsubjects:\n  - kind: ServiceAccount\n    name: slimfaas\n    namespace: slimfaas-demo\nroleRef:\n  kind: Role\n  name: deployment-statefulset-manager\n  apiGroup: rbac.authorization.k8s.io\n---\napiVersion: rbac.authorization.k8s.io/v1\nkind: Role\nmetadata:\n  name: endpoints-viewer\n  namespace: slimfaas-demo\nrules:\n  - apiGroups: [\"\"]\n    resources: [\"endpoints\"]\n    verbs: [\"get\", \"list\", \"watch\"]\n---\napiVersion: rbac.authorization.k8s.io/v1\nkind: RoleBinding\nmetadata:\n  name: slimfaas-endpoints-viewer\n  namespace: slimfaas-demo\nsubjects:\n  - kind: ServiceAccount\n    name: slimfaas\n    namespace: slimfaas-demo\nroleRef:\n  kind: Role\n  name: endpoints-viewer\n  apiGroup: rbac.authorization.k8s.io\n---\n</code></pre>\n<p>Example partial YAML (from <em>deployment-slimfaas.yml</em>):</p>\n<pre><code class=\"language-yaml\">apiVersion: apps/v1\nkind: StatefulSet\nmetadata:\n  name: slimfaas\n  namespace: slimfaas-demo\nspec:\n  replicas: 3\n  selector:\n    matchLabels:\n      app: slimfaas\n  serviceName: slimfaas\n  template:\n    metadata:\n      labels:\n        app: slimfaas\n    spec:\n      # ...\n      containers:\n        - name: slimfaas\n          image: docker.io/axaguildev/slimfaas:latest\n          ports:\n            - containerPort: 5000    # SlimFaas main port\n            - containerPort: 3262    # SlimData port\n          # ...\n</code></pre>\n<p>Example annotation for a function Deployment:</p>\n<pre><code class=\"language-yaml\">apiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: fibonacci1\n  namespace: slimfaas-demo\nspec:\n  template:\n    metadata:\n      annotations:\n        SlimFaas/Function: \"true\" # Enable SlimFaas\n        SlimFaas/ReplicasMin: \"0\"\n        SlimFaas/ReplicasAtStart: \"1\"\n        SlimFaas/TimeoutSecondBeforeSetReplicasMin: \"300\"\n        SlimFaas/NumberParallelRequest: \"10\"\n        SlimFaas/DependsOn: \"mysql,fibonacci2\"\n        SlimFaas/SubscribeEvents: \"Public:my-event-name1,Private:my-event-name2,my-event-name3\"\n        SlimFaas/DefaultVisibility: \"Public\"\n        # ...\n    spec:\n      containers:\n        - name: fibonacci1\n          image: axaguildev/fibonacci:latest\n          # ...\n\n</code></pre>\n<p>For more details, see <strong>How It Works</strong> and the other documentation pages.</p>\n","metadata":{}},"__N_SSG":true}